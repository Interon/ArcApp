// Use this variable to maintain a list of registered modules (see 'module' function below)
var modules = {};

//
// This function is a simple wrapper around "angular.module(...)".
//
// It can replace both angular,module(..., []) AND angular.module(...) (the variants with and without a list of
// dependencies), so it can be used both to register/create a module AND to use a module;
//
// it will figure out automatically if the module was already registered and call the right 'angular.module()'
// variant (with or without a dependency array).
//
// This circumvents the problem where a module is defined in 2 separate Javascript source files, and the module is
// created in 1 file and used in the others. You then have to load the Javascript files in the right order, or it
// won't work. Using the 'module' function circumvents this.
//
// NOTE: practically speaking this is only useful if you don't have to declare dependencies for the module.
//
var appModule = function(moduleName, deps) {
  var mod = modules[moduleName];

  if (!mod) {
    mod = angular.module(moduleName, deps || []);
    modules[moduleName] = mod;
  }

  return mod;
};

// THIS IS A PLACEHOLDER, TO BE REPLACED DURING PRODUCTION BUILDS BY GULP-ANGULAR-TEMPLATECACHE - DO NOT REMOVE !
angular.module("templates", []);
;(function () {
  "use strict";

//
// app.js
//
// Main application sript
//

// Declare the 'app.config' module, this is because config.js is generated and doesn't the app.config module itself
  angular.module('app.config', []);
 

//
// Declare the main 'app' module and state its dependencies. All of the other modules will "declare themselves".
//
// NOTE: looked at gulp-angular-modules (https://github.com/yagoferrer/gulp-angular-modules) which should make it
// possible to get rid of manually managing the list of dependencies. However, I couldn't get this to work.
//





  angular.module('app', [
    // libraries
    'ionic', 'ionic.service.core', 'ionic.service.analytics',  'nemLogging', 'ngGeolocation', 'uiGmapgoogle-maps',// IONIC.IO (Alpha software - disable for production?)
    'firebase',
    'ngCordova', 'ngMessages', 'fusionMessages', 'ngIOS9UIWebViewPatch',
    // angular-translate
    'pascalprecht.translate',
    // ionic-content-banner
    'jett.ionic.content.banner','ngResource',"hateoas","restangular","ngOnload","ngSanitize",
    // config
    'app.config',
    // generic services
    'app.util', 'app.firebase',
    // app services
    'app.user', 'app.tracking',
    // controllers and routers
    'app.intro', 'app.auth.signup', 'app.auth.login', 'app.auth.forgotPassword', 'app.mainPage','app.sms',
    // ANGULAR-TEMPLATECACHE
  'templates'
  ])


      .directive('logo', function() {
  return {
    templateUrl: 'js/app/arcapp/logo.html',
      controller : ['$scope', '$rootScope', function ($scope,$rootScope){
          $scope.showversion = false;
          $scope.version = $rootScope.version;



      }]
  }})
      .directive('contactno', function() {
          return {
              replace: true,
              transclue: true,
              templateUrl: 'js/app/arcapp/contactno.html',
              scope: {
                  contactno: '@',
                  title:'@'
              }

          }})
      .directive('driver', function() {
          return {
              replace: false,
              transclue: true,
              templateUrl: 'js/app/arcapp/driver.html',
              scope: {
                  nodeid: '@'
              },
              controller: ['$scope', 'Restangular', 'Application', 'Server', function ( $scope,Restangular,Application,Server) {

                  var info = Restangular.all('/team/?where=id='+$scope.nodeid+'&descendants=TeamMember').getList().$object;
                  console.log(info);
                  $scope.driver = info;
                  $scope.url = Server.url;
              }]
}})
      .directive('driverimage', function() {
          return {
              replace: false,
              transclue: true,
              templateUrl: 'js/app/arcapp/driverimage.html',
              scope: {
                  nodeid: '@',
                  mystyle: '@'
              },
              controller: ['$scope', 'Restangular', 'Application', 'Server', function ( $scope,Restangular,Application,Server) {

                  var info = Restangular.all('/team/?where=id='+$scope.nodeid+'&descendants=TeamMember').getList().$object;
                  $scope.driver = info;
                  $scope.url = Server.url;
              }]
          }})
      .directive('teammember', function() {
          return {
              replace: true,
              transclue: true,
              templateUrl: 'js/app/arcapp/teammember.html',
              scope: {
                  nodeid: '@',
                  mystyle: '@'
              },
              controller: ['$scope', 'Restangular', 'Application', 'Server', function ( $scope,Restangular,Application,Server) {


                  Restangular.all('/team/?where=id='+$scope.nodeid+'&descendants=TeamMember').getList()  // GET: /users
                      .then(function(data) {
                          $scope.tm = data[0];

                      });



                  $scope.url = Server.url;
              }]
          }})
      .directive('teamlist', function() {
          return {
              replace: true,

              templateUrl: 'js/app/arcapp/teamlist.html',
              scope: {
                  teamlist: '@'

              }

          }})
      //.directive('carimage', function() {
      //    return {
      //        replace: true,
      //        transclue: true,
      //        templateUrl: 'js/app/arcapp/carimage.html',
      //        scope: {
      //            nodeid: '@',
      //            mystyle: '@'
      //
      //        },
      //        controller: function ( $scope,Restangular,Application,Server) {
      //
      //            var info = Restangular.all('/team/?where=id='+$scope.nodeid+'&descendants=TeamMember').getList().$object;
      //            console.log(info);
      //            $scope.driver = info;
      //            $scope.url = Server.url;
      //        }
      //    }})
      .directive('cardetails', function() {
          return {
              replace: true,
              transclue: true,
              templateUrl: 'js/app/arcapp/carimage.html',
              scope: {
                  obj: '@'

              }

          }})
      .directive('triplistSideMenu', ['Application', function(Application) {
  return {
    templateUrl: 'js/app/arcapp/rightmenu.html',
    controller:'ApplicationCtrl'
  
  }}])
      .filter('hrefToJS', ['$sce', '$sanitize', function ($sce, $sanitize) {
          return function (text) {
              var regex = /href="([\S]+)"/g;
              var newString = $sanitize(text).replace(regex, "onClick=\"window.open('$1', '_blank', 'location=yes')\"");
              return $sce.trustAsHtml(newString);
          }
      }])
      .directive('spacer', function () {
          return {
              template: '<div ng-show="windows" class="spacer" style="height: 100px;"></div><div ng-show="android" class="spacer" style="height: 100px;"></div><div ng-show="ios" class="spacer" style="height: 120px;"></div>',

          controller: ['$scope', function ( $scope) {

              $scope.ios = ionic.Platform.isIOS();
              $scope.android = ionic.Platform.isAndroid();
              $scope.windows = ionic.Platform.isWindowsPhone();
          }]

      }})
      .directive('spacersmall', function () {
          return {
              template: '<div ng-show="windows" class="spacer" style="height: 100px;"></div><div ng-show="android" class="spacer" style="height: 100px;"></div><div ng-show="ios" class="spacer" style="height: 120px;"></div>',

          controller: ['$scope', function ( $scope) {

              $scope.ios = ionic.Platform.isIOS();
              $scope.android = ionic.Platform.isAndroid();
              $scope.windows = ionic.Platform.isWindowsPhone();
          }]

      }})
      .directive('spacerbig', function () {
          return {
              template: '<div ng-show="windows" class="spacer" style="height: 100px;"></div><div ng-show="android" class="spacer" style="height: 120px;"></div><div ng-show="ios" class="spacer" style="height: 140px;"></div>',

          controller: ['$scope', function ( $scope) {

              $scope.ios = ionic.Platform.isIOS();
              $scope.android = ionic.Platform.isAndroid();
               $scope.windows = ionic.Platform.isWindowsPhone();
          }]

      }})
   .config(['uiGmapGoogleMapApiProvider', function(uiGmapGoogleMapApiProvider) {
    uiGmapGoogleMapApiProvider.configure({
        //    key: 'your api key',
        v: '3.20', //defaults to latest 3.X anyhow
        libraries: 'weather,geometry,visualization,places'
    })
}])
    .config(['RestangularProvider', function(RestangularProvider) {
        RestangularProvider.setBaseUrl('http://arcapp.interon.co.za/');

        RestangularProvider.setResponseExtractor(function(response, operation) {

            if(operation=="getList")
            {
                return response.entities;
            }
            if(operation=="get")
            {
                return response;
            }
            if(typeof(response.entities) == "undefined")
            {
                return response.properties;
            }
            else
            {
                return response;
           }
        });

        /*RestangularProvider.addElementTransformer('accounts', false, function(element) {
            element.accountName = 'Changed';
            return element;
        });*/

        RestangularProvider.setDefaultHttpFields({cache: true});
        RestangularProvider.setMethodOverriders(["put", "patch"]);

        // In this case we are mapping the id of each element to the _id field.
        // We also change the Restangular route.
        // The default value for parentResource remains the same.
        //RestangularProvider.setRestangularFields({
        //    id: "_id",
        //    route: "restangularRoute",
        //    selfLink: "self.href"
        //});

       /* RestangularProvider.setRequestSuffix('.json');

        // Use Request interceptor
        RestangularProvider.setRequestInterceptor(function(element, operation, route, url) {
            delete element.name;
            return element;
        });

        // ..or use the full request interceptor, setRequestInterceptor's more powerful brother!
        RestangularProvider.setFullRequestInterceptor(function(element, operation, route, url, headers, params, httpConfig) {
            delete element.name;
            return {
                element: element,
                params: _.extend(params, {single: true}),
                headers: headers,
                httpConfig: httpConfig
            };
        });*/

    }])
      .constant('FBREF', new Firebase('https://arcapp.firebaseio.com'))
      .constant('ServerUrl','http://arcapp.interon.co.za' )

    //.config(function (HateoasInterceptorProvider) {
    //    HateoasInterceptorProvider.transformAllResponses();
    //})
      .config(['uiGmapGoogleMapApiProvider', function(uiGmapGoogleMapApiProvider) {
          uiGmapGoogleMapApiProvider.configure({
              //key: 'AIzaSyAc8Bwqfc1l1fTKzKo5cZYtiatEDb5Ox4s',
              libraries: 'places,geometry,visualization',
              v: '3.17'
          });
      }])


    .config(['$stateProvider', function ($stateProvider) {

      // top level routes (all other routes are defined within their own module)
      $stateProvider

        .state('app', {
          url: "/app",
          abstract: true,
          templateUrl: "js/app/menu/menu.html"
        })
         .state('demo', {
          url: "/demo",
             cache: false,
             reload:true,
          templateUrl: "js/app/mainpage/demo.html"

        })
 .state('admin', {
          url: "/admin",
          templateUrl: "js/app/admin/admin.html"
 })
          .state('emergency', {
              url: "/emergency",
              templateUrl: "js/app/sms/sms.html",
              reload:true
          })
          .state('triplist', {
              url: "/triplist",
              templateUrl: "js/app/tripmanagement/home/triplist.html",
              cache: false,
              reload:true
          })
          .state('opstriplist', {
              url: "/opstriplist",
              templateUrl: "js/app/tripmanagement/home/opstriplist.html",
              cache: false,
              reload:true
          })
          .state('opstripdetails', {
              url: "/opstripdetails",
              templateUrl: "js/app/tripmanagement/home/opstripdetails.html",
              cache: false,
              reload:true,
              params:{
                  Id: {
                      value: null

                  }}

          })
          .state('tripdetails', {
              url: "/tripdetails",
              templateUrl: "js/app/tripmanagement/home/tripdetails.html",
              cache: false,
              reload:true,
              params:{
              Id: {
                  value: null

              }}

          })
           .state('weather', {
              url: "/weather",
              templateUrl: "js/app/tripmanagement/weather/weatherlist.html",
               reload:true
          })
          .state('maps', {
              url: "/maps",
              templateUrl: "js/app/tripmanagement/locations/maps.html",
              reload:true
          })
          .state('opps', {
              url: "/opps",
              templateUrl: "js/app/tripmanagement/operationalplan/operation.html",
              reload:true
          })
          .state('alerts', {
              url: "/alerts",
              templateUrl: "js/app/tripmanagement/alerts/alerts.html",
              reload:true
          })
          .state('countryInfo', {
              url: "/countryInfo",
              templateUrl: "js/app/tripmanagement/countryinformation/countryInfo.html"
          })
          .state('secureDrive', {
              url: "/secureDrive",
              cache: false,
              templateUrl: "js/app/securedrive/securedrive.html",
              reload:true
          })
          .state('secureDriveList', {
              url: "/secureDriveList",
              templateUrl: "js/app/securedrive/securedrivelist.html",
              cache: false,
              reload:true
          })


        //
        // All UI-router states that are children of 'app.auth' need a valid user - this is enforced through a Route
        // Resolve, as you can see below ("UserService.checkUser()")
        //
        // When the resolve fails (meaning the user is not logged in), then "$rootScope.$on('$stateChangeError'..." (see
        // below) is triggered, which then redirects the app to the login page.
        //
        // This technique was inspired by:
        //
        // http://www.clearlyinnovative.com/starter-ionic-application-template-wparse-integration
        //

        .state('app.auth', {
          url: "/auth",
          abstract: true,
          template: '<ion-view/>',
          resolve: {
            user: ['UserService', function (UserService) {
              return UserService.checkUser();
            }]
          }
        });
    }])

    .config(['$ionicConfigProvider', function ($ionicConfigProvider) {

      // http://forum.ionicframework.com/t/change-hide-ion-nav-back-button-text/5260/14
      // remove back button text, use unicode em space characters to increase touch target area size of back button
      $ionicConfigProvider.platform.ios.navBar.alignTitle('left');
$ionicConfigProvider.backButton.text('').icon('ion-chevron-left').previousTitleText(false);
      // NOTE: we put the tabs at the top for both Android and iOS
      $ionicConfigProvider.tabs.position("top");
       // $ionicConfigProvider.views.maxCache(0);
      //$ionicConfigProvider.navBar.alignTitle('center');
      //
      //$ionicConfigProvider.navBar.positionPrimaryButtons('left');
      //$ionicConfigProvider.navBar.positionSecondaryButtons('right');
    }])
      .config(['$httpProvider', function($httpProvider) {
          delete $httpProvider.defaults.headers.common['X-Requested-With'];
      }])
    .config(['$logProvider', 'APP', function ($logProvider, APP) {

      // switch off debug logging in production
      $logProvider.debugEnabled(APP.devMode); // default is true
    }])

    .config(['$compileProvider', 'APP', function ($compileProvider, APP) {

      // switch off AngularJS debug info in production for better performance
      $compileProvider.debugInfoEnabled(APP.devMode);
    }])

    .config(['$ionicAppProvider', 'ionicIO', function ($ionicAppProvider, ionicIO) {
      $ionicAppProvider.identify({
        app_id: ionicIO.appId,
        api_key: ionicIO.apiKey
      });
    }])

    .config(['$translateProvider', function ($translateProvider) {
      $translateProvider
        .useStaticFilesLoader({
          prefix: 'js/locales/',
          suffix: '.json'
        })
        .registerAvailableLanguageKeys(['en'], {
          'en': 'en', 'en_GB': 'en', 'en_US': 'en'
        })
        .preferredLanguage('en')
        .fallbackLanguage('en')
        .useSanitizeValueStrategy('escapeParameters');
    }])
 
    .factory('$exceptionHandler', ['$log', function ($log) {

      // global AngularJS exception handler, see:
      // http://blog.pdsullivan.com/posts/2015/02/19/ionicframework-googleanalytics-log-errors.html
      return function (exception, cause) {
        exception.message += ' (caused by "' + cause + ')", stack: ' + exception.stack;
        $log.error("error: " + exception);
      };
    }])

    .run(['$ionicPlatform', '$ionicPopup', '$ionicSideMenuDelegate', '$ionicHistory', '$state', '$rootScope', '$translate', '$timeout', '$log', 'loggingDecorator', 'Application', 'APP', 'Tracking', 'LocationService', 'Restangular', function ($ionicPlatform, $ionicPopup, $ionicSideMenuDelegate, $ionicHistory, $state, $rootScope, $translate,$timeout,
                   $log, loggingDecorator, Application, APP, Tracking,LocationService,Restangular) {

      loggingDecorator.decorate($log);



        $rootScope.$on('$stateChangeError',
        function (event, toState, toParams, fromState, fromParams, error) {

          $log.debug('$stateChangeError, to: ' + JSON.stringify(toState) + ' error: ' + JSON.stringify(error));

          // If the error is "noUser" then go to login state. For explanation see comments above. Technique inspired by:
          // http://www.clearlyinnovative.com/starter-ionic-application-template-wparse-integration
          if (error && (error.error === "noUser" || error.error === "userEmailNotVerified")) {

            // event.preventDefault(): this is necessary to keep Ionic from loading the login page TWICE. See:
            // http://stackoverflow.com/questions/22936865/handling-error-in-ui-routers-resolve-function-aka-statechangeerror-passing-d
            event.preventDefault();

            $state.go('login', error.error === "userEmailNotVerified" ? {verifyEmail: 'notVerified'} : {});
          }
        });

      $ionicPlatform.ready(function () {

          //var div = document.getElementById("map_canvas");
          //var map = plugin.google.maps.Map.getMap(div);

         // console.log('AppUpdater->'+AppUpdater('http://localhost:3000/mobile_app/app_info'));
         // HockeyApp.init(
         //     [ '8d0c0e28df174b3684fcb2b8c7bd8115', true, true ],
         //     function() { console.log('hockeyapp initialised'); },
         //     function(msg) { console.log(msg); });
          //var io = Ionic.io();
          //var push = new Ionic.Push({
          //    "debug": true
          //});
          //
          //push.register(function(token) {
          //    console.log("Device token:",token.token);
          //});
          if(window.Connection) {
              if (navigator.connection.type == Connection.NONE) {
                  $ionicPopup.confirm({
                          title: "Internet Disconnected",
                          content: "The internet is disconnected on your device."
                      })
                      .then(function (result) {
                          if (!result) {
                              $ionicPopup.confirm({
                                  title: "Phone Error",
                                  content: "Network can not be detected"
                              })
                              ionic.Platform.exitApp();
                          }
                      });
                  ionic.Platform.exitApp();
              }

          }
          if(window.Connection) {
              if (navigator.connection.type == Connection.CELL_2G) {
                  $ionicPopup.confirm({
                          title: "Slow Network Speed",
                          content: "This application might malfunction because if slow network speeds"
                      })
                      .then(function (result) {
                          if (!result) {
                              $ionicPopup.confirm({
                                  title: "Phone Error",
                                  content: "Network can not be detected"
                              })
                              ionic.Platform.exitApp();
                          }
                      });
              }

          }
          try {
              cordova.getAppVersion(function (version) {
                  $rootScope.version = version + '.'+ APP.SubVersion;
              });
          }
          catch (e)
          {
              $rootScope.version = "0.00." + APP.SubVersion;
          }
          LocationService.getCurrentLocation().then(function (location,lon,lat) {

              var countrycode = location.split(',')[1];
              var lon = location.split(',')[2];
              var lat = location.split(',')[3];
              var c = Application.countries;
              var _country = '';
              var country = jlinq.from(c)
                  .equals('code', countrycode.trim())
                .select();
              var c = {
                  code:'',
                  name:'',
                  url:'',
                  lat:'',
                  lon:''
              }
              _country = country[0].name;
              c.code = country[0].code;
              c.name = country[0].name;
              c.nodeid ='';
              c.url = _country.replace(/\s+/g, '-').toLowerCase();
              c.lon = lon;
              c.lat = lat;

             $rootScope.country = c;

          }, function () {

              showError('Error retrieving current location!', 'Your location could not be retrieved. Please make sure you have your GPS Location Services enabled and your network allows the retrieval.');
          });
          function showError(title, text) {
              $ionicPopup.alert({
                  title: title,
                  template: text
              });
          }

          setTimeout(function() {
            try {
              navigator.splashscreen.hide();
            }catch(e){}

          }, 4000);
          if(window.Connection) {
              if(navigator.connection.type == Connection.NONE) {
                  $ionicPopup.confirm({
                          title: "Internet Disconnected",
                          content: "The internet is disconnected on your device."
                      })
                      .then(function(result) {
                          if(!result) {
                              ionic.Platform.exitApp();
                          }
                      });
              }

          }
          if(window.Connection) {
              if(navigator.connection.type == Connection.CELL_2G) {
                  $ionicPopup.confirm({
                          title: "Internet Slow",
                          content: "The internet is extremely slow App might not respond"
                      })
                      .then(function(result) {
                          if(!result) {
                              ionic.Platform.exitApp();
                          }
                      });
              }
          }
          if(window.Connection) {
              if(navigator.connection.type == Connection.ETHERNET || navigator.connection.type == Connection.UNKNOWN) {
                  setTimeout(function() {
                      try {


                  Restangular.one('&nocache=true').get()
                      .then(function(data) {
                          if(!data)
                          {
                              $ionicPopup.confirm({
                                      title: "Can't locate Server",
                                      content: "Server not found. Error 404"
                                  })
                                  .then(function() {

                                          ionic.Platform.exitApp();

                                  });
                          }
                      });
                      }catch(e){}
                      $ionicPopup.confirm({
                              title: "Internet Disconnected",
                              content: "The internet is disconnected on your device."
                          })
                          .then(function() {

                                  ionic.Platform.exitApp();

                          });
                  }, 30000);
                  $ionicPopup.confirm({
                          title: "Internet Disconnected",
                          content: "The internet is disconnected on your device."
                      })
                      .then(function(result) {
                          if(!result) {
                              ionic.Platform.exitApp();
                          }
                      });
              }
          }


          // tracking/analytics (Ionic.io)
        Tracking.init({
          // SET TO FALSE TO ENABLE IONIC.IO TRACKING, IF SET TO TRUE THEN THE IONIC ANALYTICS LIB DOES NOTHING
          dryRun: APP.noTracking
        });

        // hide or show the accessory bar by default (set the value to false to show the accessory bar above the keyboard
        // for form inputs - see: https://github.com/driftyco/ionic-plugin-keyboard/issues/97 and
        // http://forum.ionicframework.com/t/ionic-select-is-missing-the-top-confirm-part-in-ios/30538
        if (window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
          cordova.plugins.Keyboard.hideKeyboardAccessoryBar(false);
        }
          if (window.StatusBar) {
              StatusBar.styleDefault();
          }

        // Add the ability to close the side menu by swiping to te right, see:
        // http://forum.ionicframework.com/t/bug-ionic-beta-14-cant-close-sidemenu-with-swipe/14236/17
        document.addEventListener('touchstart', function (event) {
          if ($ionicSideMenuDelegate.isOpenLeft()) {
            event.preventDefault();
          }
        });

        // Prevent the Android hardware back button from exiting the app 'unvoluntarily' - ask the user to confirm; see:
        //
        // http://www.gajotres.net/ionic-framework-handling-android-back-button-like-a-pro/
        // http://forum.ionicframework.com/t/handling-the-hardware-back-buttons/1505/23
        //
        // If more flexibility is needed then one can implement something along these lines:
        //
        // https://gist.github.com/kyletns/93a510465e433c1981e1
        //
        $ionicPlatform.registerBackButtonAction(function (event) {

          if ($ionicHistory.backView() === null) {  // no more previous screen in the history stack, so "back" would exit
            //var key = 'exit-popup.';
            //
            //$translate([key + 'title', key + 'text', key + 'ok-button', key + 'cancel-button']).then(function (translations) {
            //
            //  $ionicPopup.confirm({
            //    title: translations[key + 'title'],
            //    template: translation,
            //    cancelText: translations[key + 'cancel-button'],
            //    okText: translations[key + 'ok-button']
            //  }).then(function (res) {
            //    if (res) {
            //      ionic.Platform.exitApp();
            //    }
            //  });
            //
            //});

          } else {
            $ionicHistory.goBack();
          }
        }, 100);  // 100 = previous view

        Application.init();
        Application.gotoStartPage($state);

      });
    }]);

    

 
}());

;(function() {
"use strict";

angular.module('app')

  //
  // This is the global top-level parent controller specified on the "body" tag in index.html, it wraps all other
  // controllers and can be used e.g. for shared callbacks/event handlers on any page; for explanation see:
  //
  // http://www.clearlyinnovative.com/ionic-framework-tabs-go-home-view/
  //
  .controller('ApplicationCtrl', ['$state', 'Application', 'UserService', '$scope', '$location', '$ionicHistory', function ($state, Application, UserService, $scope, $location,$ionicHistory) {

 $scope.myGoBack = function(number) {
    $ionicHistory.goBack(number);
  };
 $scope.goTo = function (hash) {
    console.log('goTo clicked - '+ hash);
  $state.go(hash);
 };
    // UTILITY FUNCTIONS
    $scope.goNext = function (hash) { 
  $state.go(hash, '' || {reload:true});
 }
    this.logout = function() {
      UserService.logout();
      $state.go('loggedout');
    };

    this.login = function() {
      $state.go('login');
    };

    this.isLoggedIn = function() {
      return Application.isUserLoggedIn();
    };

  }])
;
}());

;(function () {
  "use strict";

  angular.module('app')
      .factory('$localstorage', ['$window', function($window) {
          return {
              set: function(key, value) {
                  $window.localStorage[key] = value;
              },
              get: function(key, defaultValue) {
                  return $window.localStorage[key] || defaultValue;
              },
              setObject: function(key, value) {
                  $window.localStorage[key] = JSON.stringify(value);
              },
              getObject: function(key) {
                  return JSON.parse($window.localStorage[key] || '{}');
              }
          }}])
      .factory('Yelp', ['$http', '$q', 'apiUrl', function($http, $q, apiUrl) {
          return {
              search: function(position) {
                  return $http({
                      method: "get",
                      url: apiUrl + 'api/v1/yelp/search',
                      params: {
                          limit: 10,
                          radius_filter: 500,
                          sort: 1,
                          ll: [position.coords.latitude, position.coords.longitude].join()
                      }
                  });
              }
          }}])
      .service('Map', ['$q', '$rootScope', '$ionicPopup', '$ionicPlatform', function($q,$rootScope,$ionicPopup,$ionicPlatform) {
          $ionicPlatform.ready(function () {

              var iam = new plugin.google.maps.LatLng($rootScope.country.lat, $rootScope.country.lon);
              var options = {

                  center: new plugin.google.maps.LatLng($rootScope.country.lat, $rootScope.country.lon),
                  zoom: 13,
                  disableDefaultUI: true,
                  styles: [{
                      stylers: [{ visibility: 'simplified' }]
                  }, {
                      elementType: 'labels',
                      stylers: [{ visibility: 'off' }]
                  }]
              }

              var div = document.getElementById("map_canvas");
              var map = plugin.google.maps.Map.getMap(div);
             // this.places = new google.maps.places.PlacesService(map);
          });

          //var iam  = new google.maps.LatLng($rootScope.country.lat, $rootScope.country.lon);
          //var infowindow = new google.maps.InfoWindow();


          var markers = [];
        this.init = function() {


        }

        this.search = function(str) {

            this.deleteMarkers();
            var request = {
                location: iam,
                radius: '5000',
                query: [str]
            };

            var d = $q.defer();
            this.places.textSearch(request, function(results, status) {
                if (status == 'OK') {
                    d.resolve(results);
                }
                else d.reject(status);
            });
            return d.promise;
            this.showMarkers()
        }

        this.addMarker = function(res) {

            for(var i =0 ;i<res.length;i++) {

                var marker = new plugin.google.maps.Marker({
                    map: this.map,
                    position: res[i].geometry.location,
                    animation: plugin.google.maps.Animation.DROP
                });
                var r = res[i];
                google.maps.event.addListener(marker, 'click', function(r) {
                    debugger;
                    var alertPopup = $ionicPopup.alert({
                        title: r.name,
                        template: r.formatted_address
                    });

                });
                markers.push(marker);
            }
            this.map.setCenter(iam);
        }
          this.setMapOnAll = function(map) {
              for (var i = 0; i < markers.length; i++) {
                  markers[i].setMap(map);
              }
          }

// Removes the markers from the map, but keeps them in the array.
          this.clearMarkers = function() {
              this.setMapOnAll(null);
          }

// Shows any markers currently in the array.
          this.showMarkers = function() {
              this.setMapOnAll(map);
          }

// Deletes all markers in the array by removing references to them.
          this.deleteMarkers = function() {
              this.clearMarkers();
              markers = [];
          }

    }])
    //
    // This service provides a set of convenience/utility methods that you can use throughout your app.
    //
    .factory('Application', ['LocalStorage', 'UserService', 'Tracking', 'APP', '$log', 'loggingService', '$ionicHistory', '$ionicLoading', function (LocalStorage, UserService, Tracking, APP, $log, loggingService, $ionicHistory,
                                      $ionicLoading) {

      var init = function () {
    
        loggingService.log("Application#init", "start");

        UserService.init();
        Tracking.initUser(UserService.currentUser());

        loggingService.log("Application#init", "end");
      };

      var getStartPage = function () {
        var state = null;

        //
        // "initial page" logic - this determines the first page to be shown by the app.
        //
        // This way, we can guide the user through the onboarding process.
        //

        if (isInitialRun()) {
          state = 'demo';
        } else if (!isUserRegistered()) {
          state = 'login';
        } else if (!isUserLoggedIn()) {
          state = 'login';
        } else {
          state = APP.routerDefaultState;
        }

        loggingService.log(
          "Application#getStartPage", "state = " + state);

        return {state: state, stateParams: null};
      };



      var  countries =  [
          { name: 'Afghanistan', code: 'AF' },
          { name: 'Åland Islands', code: 'AX' },
          { name: 'Albania', code: 'AL' },
          { name: 'Algeria', code: 'DZ' },
          { name: 'American Samoa', code: 'AS' },
          { name: 'Andorra', code: 'AD' },
          { name: 'Angola', code: 'AO' },
          { name: 'Anguilla', code: 'AI' },
          { name: 'Antarctica', code: 'AQ' },
          { name: 'Antigua and Barbuda', code: 'AG' },
          { name: 'Argentina', code: 'AR' },
          { name: 'Armenia', code: 'AM' },
          { name: 'Aruba', code: 'AW' },
          { name: 'Australia', code: 'AU' },
          { name: 'Austria', code: 'AT' },
          { name: 'Azerbaijan', code: 'AZ' },
          { name: 'Bahamas', code: 'BS' },
          { name: 'Bahrain', code: 'BH' },
          { name: 'Bangladesh', code: 'BD' },
          { name: 'Barbados', code: 'BB' },
          { name: 'Belarus', code: 'BY' },
          { name: 'Belgium', code: 'BE' },
          { name: 'Belize', code: 'BZ' },
          { name: 'Benin', code: 'BJ' },
          { name: 'Bermuda', code: 'BM' },
          { name: 'Bhutan', code: 'BT' },
          { name: 'Bolivia', code: 'BO' },
          { name: 'Bosnia and Herzegovina', code: 'BA' },
          { name: 'Botswana', code: 'BW' },
          { name: 'Bouvet Island', code: 'BV' },
          { name: 'Brazil', code: 'BR' },
          { name: 'British Indian Ocean Territory', code: 'IO' },
          { name: 'Brunei Darussalam', code: 'BN' },
          { name: 'Bulgaria', code: 'BG' },
          { name: 'Burkina Faso', code: 'BF' },
          { name: 'Burundi', code: 'BI' },
          { name: 'Cambodia', code: 'KH' },
          { name: 'Cameroon', code: 'CM' },
          { name: 'Canada', code: 'CA' },
          { name: 'Cape Verde', code: 'CV' },
          { name: 'Cayman Islands', code: 'KY' },
          { name: 'Central African Republic', code: 'CF' },
          { name: 'Chad', code: 'TD' },
          { name: 'Chile', code: 'CL' },
          { name: 'China', code: 'CN' },
          { name: 'Christmas Island', code: 'CX' },
          { name: 'Cocos (Keeling) Islands', code: 'CC' },
          { name: 'Colombia', code: 'CO' },
          { name: 'Comoros', code: 'KM' },
          { name: 'Congo', code: 'CG' },
          { name: 'Congo, The Democratic Republic of the', code: 'CD' },
          { name: 'Cook Islands', code: 'CK' },
          { name: 'Costa Rica', code: 'CR' },
          { name: 'Cote D\'Ivoire', code: 'CI' },
          { name: 'Croatia', code: 'HR' },
          { name: 'Cuba', code: 'CU' },
          { name: 'Cyprus', code: 'CY' },
          { name: 'Czech Republic', code: 'CZ' },
          { name: 'Denmark', code: 'DK' },
          { name: 'Djibouti', code: 'DJ' },
          { name: 'Dominica', code: 'DM' },
          { name: 'Dominican Republic', code: 'DO' },
          { name: 'Ecuador', code: 'EC' },
          { name: 'Egypt', code: 'EG' },
          { name: 'El Salvador', code: 'SV' },
          { name: 'Equatorial Guinea', code: 'GQ' },
          { name: 'Eritrea', code: 'ER' },
          { name: 'Estonia', code: 'EE' },
          { name: 'Ethiopia', code: 'ET' },
          { name: 'Falkland Islands (Malvinas)', code: 'FK' },
          { name: 'Faroe Islands', code: 'FO' },
          { name: 'Fiji', code: 'FJ' },
          { name: 'Finland', code: 'FI' },
          { name: 'France', code: 'FR' },
          { name: 'French Guiana', code: 'GF' },
          { name: 'French Polynesia', code: 'PF' },
          { name: 'French Southern Territories', code: 'TF' },
          { name: 'Gabon', code: 'GA' },
          { name: 'Gambia', code: 'GM' },
          { name: 'Georgia', code: 'GE' },
          { name: 'Germany', code: 'DE' },
          { name: 'Ghana', code: 'GH' },
          { name: 'Gibraltar', code: 'GI' },
          { name: 'Greece', code: 'GR' },
          { name: 'Greenland', code: 'GL' },
          { name: 'Grenada', code: 'GD' },
          { name: 'Guadeloupe', code: 'GP' },
          { name: 'Guam', code: 'GU' },
          { name: 'Guatemala', code: 'GT' },
          { name: 'Guernsey', code: 'GG' },
          { name: 'Guinea', code: 'GN' },
          { name: 'Guinea-Bissau', code: 'GW' },
          { name: 'Guyana', code: 'GY' },
          { name: 'Haiti', code: 'HT' },
          { name: 'Heard Island and Mcdonald Islands', code: 'HM' },
          { name: 'Holy See (Vatican City State)', code: 'VA' },
          { name: 'Honduras', code: 'HN' },
          { name: 'Hong Kong', code: 'HK' },
          { name: 'Hungary', code: 'HU' },
          { name: 'Iceland', code: 'IS' },
          { name: 'India', code: 'IN' },
          { name: 'Indonesia', code: 'ID' },
          { name: 'Iran, Islamic Republic Of', code: 'IR' },
          { name: 'Iraq', code: 'IQ' },
          { name: 'Ireland', code: 'IE' },
          { name: 'Isle of Man', code: 'IM' },
          { name: 'Israel', code: 'IL' },
          { name: 'Italy', code: 'IT' },
          { name: 'Jamaica', code: 'JM' },
          { name: 'Japan', code: 'JP' },
          { name: 'Jersey', code: 'JE' },
          { name: 'Jordan', code: 'JO' },
          { name: 'Kazakhstan', code: 'KZ' },
          { name: 'Kenya', code: 'KE' },
          { name: 'Kiribati', code: 'KI' },
          { name: 'Democratic People\'s Republic of Korea', code: 'KP' },
          { name: 'Korea, Republic of', code: 'KR' },
          { name: 'Kosovo', code: 'XK' },
          { name: 'Kuwait', code: 'KW' },
          { name: 'Kyrgyzstan', code: 'KG' },
          { name: 'Lao People\'s Democratic Republic', code: 'LA' },
          { name: 'Latvia', code: 'LV' },
          { name: 'Lebanon', code: 'LB' },
          { name: 'Lesotho', code: 'LS' },
          { name: 'Liberia', code: 'LR' },
          { name: 'Libyan Arab Jamahiriya', code: 'LY' },
          { name: 'Liechtenstein', code: 'LI' },
          { name: 'Lithuania', code: 'LT' },
          { name: 'Luxembourg', code: 'LU' },
          { name: 'Macao', code: 'MO' },
          { name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK' },
          { name: 'Madagascar', code: 'MG' },
          { name: 'Malawi', code: 'MW' },
          { name: 'Malaysia', code: 'MY' },
          { name: 'Maldives', code: 'MV' },
          { name: 'Mali', code: 'ML' },
          { name: 'Malta', code: 'MT' },
          { name: 'Marshall Islands', code: 'MH' },
          { name: 'Martinique', code: 'MQ' },
          { name: 'Mauritania', code: 'MR' },
          { name: 'Mauritius', code: 'MU' },
          { name: 'Mayotte', code: 'YT' },
          { name: 'Mexico', code: 'MX' },
          { name: 'Micronesia, Federated States of', code: 'FM' },
          { name: 'Moldova, Republic of', code: 'MD' },
          { name: 'Monaco', code: 'MC' },
          { name: 'Mongolia', code: 'MN' },
          { name: 'Montenegro', code: 'ME' },
          { name: 'Montserrat', code: 'MS' },
          { name: 'Morocco', code: 'MA' },
          { name: 'Mozambique', code: 'MZ' },
          { name: 'Myanmar', code: 'MM' },
          { name: 'Namibia', code: 'NA' },
          { name: 'Nauru', code: 'NR' },
          { name: 'Nepal', code: 'NP' },
          { name: 'Netherlands', code: 'NL' },
          { name: 'Netherlands Antilles', code: 'AN' },
          { name: 'New Caledonia', code: 'NC' },
          { name: 'New Zealand', code: 'NZ' },
          { name: 'Nicaragua', code: 'NI' },
          { name: 'Niger', code: 'NE' },
          { name: 'Nigeria', code: 'NG' },
          { name: 'Niue', code: 'NU' },
          { name: 'Norfolk Island', code: 'NF' },
          { name: 'Northern Mariana Islands', code: 'MP' },
          { name: 'Norway', code: 'NO' },
          { name: 'Oman', code: 'OM' },
          { name: 'Pakistan', code: 'PK' },
          { name: 'Palau', code: 'PW' },
          { name: 'Palestinian Territory, Occupied', code: 'PS' },
          { name: 'Panama', code: 'PA' },
          { name: 'Papua New Guinea', code: 'PG' },
          { name: 'Paraguay', code: 'PY' },
          { name: 'Peru', code: 'PE' },
          { name: 'Philippines', code: 'PH' },
          { name: 'Pitcairn', code: 'PN' },
          { name: 'Poland', code: 'PL' },
          { name: 'Portugal', code: 'PT' },
          { name: 'Puerto Rico', code: 'PR' },
          { name: 'Qatar', code: 'QA' },
          { name: 'Reunion', code: 'RE' },
          { name: 'Romania', code: 'RO' },
          { name: 'Russian Federation', code: 'RU' },
          { name: 'Rwanda', code: 'RW' },
          { name: 'Saint Helena', code: 'SH' },
          { name: 'Saint Kitts and Nevis', code: 'KN' },
          { name: 'Saint Lucia', code: 'LC' },
          { name: 'Saint Pierre and Miquelon', code: 'PM' },
          { name: 'Saint Vincent and the Grenadines', code: 'VC' },
          { name: 'Samoa', code: 'WS' },
          { name: 'San Marino', code: 'SM' },
          { name: 'Sao Tome and Principe', code: 'ST' },
          { name: 'Saudi Arabia', code: 'SA' },
          { name: 'Senegal', code: 'SN' },
          { name: 'Serbia', code: 'RS' },
          { name: 'Seychelles', code: 'SC' },
          { name: 'Sierra Leone', code: 'SL' },
          { name: 'Singapore', code: 'SG' },
          { name: 'Slovakia', code: 'SK' },
          { name: 'Slovenia', code: 'SI' },
          { name: 'Solomon Islands', code: 'SB' },
          { name: 'Somalia', code: 'SO' },
          { name: 'South Africa', code: 'ZA' },
          { name: 'South Georgia and the South Sandwich Islands', code: 'GS' },
          { name: 'Spain', code: 'ES' },
          { name: 'Sri Lanka', code: 'LK' },
          { name: 'Sudan', code: 'SD' },
          { name: 'Suriname', code: 'SR' },
          { name: 'Svalbard and Jan Mayen', code: 'SJ' },
          { name: 'Swaziland', code: 'SZ' },
          { name: 'Sweden', code: 'SE' },
          { name: 'Switzerland', code: 'CH' },
          { name: 'Syrian Arab Republic', code: 'SY' },
          { name: 'Taiwan', code: 'TW' },
          { name: 'Tajikistan', code: 'TJ' },
          { name: 'Tanzania, United Republic of', code: 'TZ' },
          { name: 'Thailand', code: 'TH' },
          { name: 'Timor-Leste', code: 'TL' },
          { name: 'Togo', code: 'TG' },
          { name: 'Tokelau', code: 'TK' },
          { name: 'Tonga', code: 'TO' },
          { name: 'Trinidad and Tobago', code: 'TT' },
          { name: 'Tunisia', code: 'TN' },
          { name: 'Turkey', code: 'TR' },
          { name: 'Turkmenistan', code: 'TM' },
          { name: 'Turks and Caicos Islands', code: 'TC' },
          { name: 'Tuvalu', code: 'TV' },
          { name: 'Uganda', code: 'UG' },
          { name: 'Ukraine', code: 'UA' },
          { name: 'United Arab Emirates', code: 'AE' },
          { name: 'United Kingdom', code: 'GB' },
          { name: 'United States', code: 'US' },
          { name: 'United States Minor Outlying Islands', code: 'UM' },
          { name: 'Uruguay', code: 'UY' },
          { name: 'Uzbekistan', code: 'UZ' },
          { name: 'Vanuatu', code: 'VU' },
          { name: 'Venezuela', code: 'VE' },
          { name: 'Viet Nam', code: 'VN' },
          { name: 'Virgin Islands, British', code: 'VG' },
          { name: 'Virgin Islands, U.S.', code: 'VI' },
          { name: 'Wallis and Futuna', code: 'WF' },
          { name: 'Western Sahara', code: 'EH' },
          { name: 'Yemen', code: 'YE' },
          { name: 'Zambia', code: 'ZM' },
          { name: 'Zimbabwe', code: 'ZW' }
      ];


      var gotoPage = function ($state, page, params, disableBackbutton, clearHistory) {

        // workaround for undesirable behavior when Ionic is showing the back button when we don't want it to
        if (disableBackbutton) {
          $ionicHistory.nextViewOptions({
            disableBack: true
          });
        }

        if (clearHistory) {
          $ionicHistory.clearHistory();
        }

        $state.go(page, params || {});
      };

      var gotoIntroPage = function ($state) {
        gotoPage($state, "app.intro", null, true);
      };

      var gotoStartPage = function ($state, clearHistory) {
        var page = getStartPage();

        // After redirecting the user to the start page we want to make sure we don't show a back-button.
        // This is why we preemptively clear the Ionic view history.
        gotoPage($state, page.state, page.stateParams, true, clearHistory);
      };

      var isInitialRun = function () {
        return LocalStorage.get("initialRun", "false") == "false";
      };

      var setInitialRun = function (initial) {
        LocalStorage.set("initialRun", initial ? "false" : "false");
      };

      var isUserRegistered = function () {
        return LocalStorage.get("userRegistered", "false") == "true";
      };

      var setUserRegistered = function (registered) {
        LocalStorage.set("userRegistered", registered ? "true" : "false");
      };

      var isUserLoggedIn = function () {
        return UserService.currentUser() !== null;
      };

      var showLoading = function (showBackdrop) {
        $ionicLoading.show({
          content: '',
          animation: 'fade-in',
          showBackdrop: showBackdrop,
          maxWidth: 200,
          showDelay: 0
        });
      };

      var hideLoading = function () {
        $ionicLoading.hide();
      };

      var resetForm = function (vm) {
        vm.form.$setPristine();
        vm.error = {};
      };

      var getLogger = function (context) {
        return $log.getLogger(context);
      };
        var url = function (context) {
            return 'arcapp.interon.co.za';
        };
      return {
        init: init,
        isInitialRun: isInitialRun,
        setInitialRun: setInitialRun,
        isUserRegistered: isUserRegistered,
        setUserRegistered: setUserRegistered,
        isUserLoggedIn: isUserLoggedIn,
        gotoPage: gotoPage,
        gotoStartPage: gotoStartPage,
        gotoIntroPage: gotoIntroPage,
        showLoading: showLoading,
        hideLoading: hideLoading,
        resetForm: resetForm,
        getLogger: getLogger,
          countries:countries,
        url  :url
      };
    }]);
}());

;(function() {
"use strict";

var AdminCtrl = /*@ngInject*/['Application', '$scope', '$ionicNavBarDelegate', '$state', '$ionicHistory', 'loggingService', function (Application, $scope, $ionicNavBarDelegate, $state, $ionicHistory, loggingService) {  // user is injected through UI-router resolve on the abstract state 'auth'
   $ionicNavBarDelegate.showBackButton(true);
   $scope.$on('$ionicView.beforeEnter', function (event, viewData) {
    viewData.enableBack = true;
    Application.setInitialRun(true);
  
   });

   $scope.reset = function () {
       alert('Application Clean');
       loggingService.log("Admin#Reset", "");
       Application.setInitialRun(true);
       Application.gotoIntroPage($state);
   };

}];
AdminCtrl.$inject = ['Application', '$scope', '$ionicNavBarDelegate', '$state', '$ionicHistory', 'loggingService'];

appModule('app.mainPage').controller('AdminCtrl', AdminCtrl);
}());
/**


 Copyright (c) 2014 torrmal:Jorge Torres, jorge-at-turned.mobi

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.

 */

try{
    var tmp = LocalFileSystem.PERSISTENT;
    var tmp = null;
}
catch(e){

    var LocalFileSystem= {PERSISTENT : window.PERSISTENT,
        TEMPORARY: window.TEMPORARY};
    window.requestFileSystem  = window.requestFileSystem || window.webkitRequestFileSystem;


}

/**
 Atomic: Atomic ajax
 https://github.com/toddmotto/atomic/blob/master/src/atomic.js
 **/
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define(factory);
    } else if (typeof exports === 'object') {
        module.exports = factory;
    } else {
        root.atomic = factory(root);
    }
})(this, function (root) {

    'use strict';

    var exports = {};

    var parse = function (req) {
        var result;
        try {
            result = JSON.parse(req.responseText);
        } catch (e) {
            result = req.responseText;
        }
        return [result, req];
    };

    var xhr = function (type, url, data) {
        var methods = {
            success: function () {},
            error: function () {}
        };
        var XHR = root.XMLHttpRequest || ActiveXObject;
        var request = new XHR('MSXML2.XMLHTTP.3.0');
        request.open(type, url, true);
        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        request.onreadystatechange = function () {
            if (request.readyState === 4) {
                if (request.status === 200) {
                    methods.success.apply(methods, parse(request));
                } else {
                    methods.error.apply(methods, parse(request));
                }
            }
        };
        request.send(data);
        return {
            success: function (callback) {
                methods.success = callback;
                return methods;
            },
            error: function (callback) {
                methods.error = callback;
                return methods;
            }
        };
    };

    exports['get'] = function (src) {
        return xhr('GET', src);
    };

    exports['put'] = function (url, data) {
        return xhr('PUT', url, data);
    };

    exports['post'] = function (url, data) {
        return xhr('POST', url, data);
    };

    exports['delete'] = function (url) {
        return xhr('DELETE', url);
    };

    return exports;

});

/**
 MD5: Cant remember where i got this one from
 **/

var MD5 = function (string) {

    function RotateLeft(lValue, iShiftBits) {
        return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
    }

    function AddUnsigned(lX,lY) {
        var lX4,lY4,lX8,lY8,lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
        if (lX4 & lY4) {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
        if (lX4 | lY4) {
            if (lResult & 0x40000000) {
                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
            } else {
                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
            }
        } else {
            return (lResult ^ lX8 ^ lY8);
        }
    }

    function F(x,y,z) { return (x & y) | ((~x) & z); }
    function G(x,y,z) { return (x & z) | (y & (~z)); }
    function H(x,y,z) { return (x ^ y ^ z); }
    function I(x,y,z) { return (y ^ (x | (~z))); }

    function FF(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function GG(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function HH(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function II(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function ConvertToWordArray(string) {
        var lWordCount;
        var lMessageLength = string.length;
        var lNumberOfWords_temp1=lMessageLength + 8;
        var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
        var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
        var lWordArray=Array(lNumberOfWords-1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while ( lByteCount < lMessageLength ) {
            lWordCount = (lByteCount-(lByteCount % 4))/4;
            lBytePosition = (lByteCount % 4)*8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount-(lByteCount % 4))/4;
        lBytePosition = (lByteCount % 4)*8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
        lWordArray[lNumberOfWords-2] = lMessageLength<<3;
        lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
        return lWordArray;
    };

    function WordToHex(lValue) {
        var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
        for (lCount = 0;lCount<=3;lCount++) {
            lByte = (lValue>>>(lCount*8)) & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
        }
        return WordToHexValue;
    };

    function Utf8Encode(string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    };

    var x=Array();
    var k,AA,BB,CC,DD,a,b,c,d;
    var S11=7, S12=12, S13=17, S14=22;
    var S21=5, S22=9 , S23=14, S24=20;
    var S31=4, S32=11, S33=16, S34=23;
    var S41=6, S42=10, S43=15, S44=21;

    string = Utf8Encode(string);

    x = ConvertToWordArray(string);

    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

    for (k=0;k<x.length;k+=16) {
        AA=a; BB=b; CC=c; DD=d;
        a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
        d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
        c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
        b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
        a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
        d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
        c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
        b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
        a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
        d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
        c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
        b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
        a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
        d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
        c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
        b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
        a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
        d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
        c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
        b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
        a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
        d=GG(d,a,b,c,x[k+10],S22,0x2441453);
        c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
        b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
        a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
        d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
        c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
        b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
        a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
        d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
        c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
        b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
        a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
        d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
        c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
        b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
        a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
        d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
        c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
        b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
        a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
        d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
        c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
        b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
        a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
        d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
        c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
        b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
        a=II(a,b,c,d,x[k+0], S41,0xF4292244);
        d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
        c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
        b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
        a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
        d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
        c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
        b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
        a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
        d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
        c=II(c,d,a,b,x[k+6], S43,0xA3014314);
        b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
        a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
        d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
        c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
        b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
        a=AddUnsigned(a,AA);
        b=AddUnsigned(b,BB);
        c=AddUnsigned(c,CC);
        d=AddUnsigned(d,DD);
    }

    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

    return temp.toLowerCase();
};

/**
 FileSystem
 Author: Jorge Torres - Turned Mobile
 **/

var Log = function(bucket, tag){
    return function(message){
        if(typeof bucket != 'undefined')
        {
            console.log(' '+bucket+':');
        }
        if(typeof tag != 'undefined')
        {
            console.log(' '+tag+':');
        }
        if(typeof message != 'object'){
            console.log('       '+message);
        }
        else
        {
            console.log(message);
        }
    };
}


var fileSystemSingleton = {
    fileSystem: false,

    load : function(callback, fail){
        fail = (typeof fail == 'undefined')? Log('FileSystem','load fail'): fail;
        if(fileSystemSingleton.fileSystem){
            callback(fileSystemSingleton.fileSystem);
            return;
        }

        if(!window.requestFileSystem){
            return fail();
        }


        window.requestFileSystem(
            LocalFileSystem.PERSISTENT,
            0,
            function(fileSystem){
                fileSystemSingleton.fileSystem = fileSystem;
                callback(fileSystemSingleton.fileSystem);
            },
            function(err){
                Log('FileSystem','load fail')('error loading file system');
                fail(err);
            }
        );
    }
};


var DirManager = function(){

    this.cache = {};

    var current_object = this;
    // recursive create
    this.create_r =function(path, callback, fail, position)
    {
        position = (typeof position == 'undefined')? 0: position;



        var path_split 		= path.split('/');
        var new_position 	= position+1;
        var sub_path 		= path_split.slice(0,new_position).join('/');

        Log('DirManager','mesg')('path:'+sub_path,'DirManager');



        var inner_callback = function(obj){
            return function(){
                Log('DirManager','mesg')('inner_callback:'+path);

                obj.create_r(path, callback, fail, new_position);
            }
        }


        if(new_position == path_split.length){
            this.create(sub_path, callback, fail);
        }
        else
        {
            this.create(sub_path, inner_callback(this), fail);
        }


    };

    this.list = function(path, success, fail){

        fail = (typeof fail == 'undefined')? Log('DirManager','crete fail'): fail;

        var template_callback = function(success){

            return 	function(entries) {
                var i;
                var ret = [];

                limit=entries.length;


                for (i=0; i<limit; i++) {
                    //console.log(entries[i].name);
                    ret.push(entries[i].name);

                }
                // console.log('LIST: '+ret);
                success(ret);
            }
        }

        if(current_object.cache[path]){

            current_object.cache[path].readEntries(
                template_callback(success)
            );
            return;
        }

        fileSystemSingleton.load(
            function(fileSystem){
                var entry=fileSystem.root;

                entry.getDirectory(path,

                    {create: true, exclusive: false},
                    function(entry){
                        var directoryReader = entry.createReader();
                        current_object.cache[path] = directoryReader;
                        directoryReader.readEntries(
                            template_callback(success)
                        );
                    },
                    function(err){
                        current_object.create_r(path,function(){success([]);},fail);
                        Log('DirManager','crete fail')('error creating directory');
                        //fail(err);
                    }
                );
            }
        );
    }

    this.create = function(path, callback, fail){
        fail = (typeof fail == 'undefined')? Log('DirManager','crete fail'): fail;
        fileSystemSingleton.load(
            function(fileSystem){
                var entry=fileSystem.root;

                entry.getDirectory(path,
                    {create: true, exclusive: false},
                    function(entry){
                        Log('FileSystem','msg')('Directory created successfuly');
                        callback(entry);
                    },
                    function(err){
                        Log('DirManager','crete fail')('error creating directory');
                        fail(err);
                    }
                );
            }
        );
    };

    this.remove = function(path, success, fail){
        fail = (typeof fail == 'undefined')? Log('DirManager','crete fail'): fail;
        success = (typeof success == 'undefined')? Log('DirManager','crete fail'): success;

        //console.log(current_object.cache);
        delete current_object.cache[path];
        //console.log(current_object.cache);
        this.create(
            path,
            function(entry){


                entry.removeRecursively(success, fail);
            }
        );
    }

};

var FileManager = function(){



    this.get_path = function(todir,tofilename, success){
        fail = (typeof fail == 'undefined')? Log('FileManager','read file fail'): fail;
        this.load_file(
            todir,
            tofilename,
            function(fileEntry){

                var sPath = fileEntry.toURL();


                success(sPath);
            },
            Log('fail')
        );



    }

    this.load_file = function(dir, file, success, fail, dont_repeat){
        if(!dir || dir =='')
        {
            Log('error','msg')('No file should be created, without a folder, to prevent a mess');
            fail();
            return;
        }
        fail = (typeof fail == 'undefined')? Log('FileManager','load file fail'): fail;
        var full_file_path = dir+'/'+file;
        var object = this;
        // well, here it will be a bit of diharrea code,
        // but, this requires to be this chain of crap, thanks to Cordova file creation asynch stuff
        // get fileSystem
        fileSystemSingleton.load(
            function(fs){
                var dont_repeat_inner = dont_repeat;
                // get file handler
                console.log(fs.root);
                fs.root.getFile(
                    full_file_path,
                    {create: true, exclusive: false},
                    success,

                    function(error){

                        if(dont_repeat == true){
                            Log('FileManager','error')('recurring error, gettingout of here!');
                            return;
                        }
                        // if target folder does not exist, create it
                        if(error.code == 3){
                            Log('FileManager','msg')('folder does not exist, creating it');
                            var a = new DirManager();
                            a.create_r(
                                dir,
                                function(){
                                    Log('FileManager','mesg')('trying to create the file again: '+file);
                                    object.load_file(dir,file,success,fail,true);
                                },
                                fail
                            );
                            return;
                        }
                        fail(error);
                    }
                );
            }
        );
    };

    this.download_file = function(url, todir, tofilename, success, fail){

        fail = (typeof fail == 'undefined')? Log('FileManager','read file fail'): fail;
        this.load_file(
            todir,
            tofilename,
            function(fileEntry){

                var sPath = fileEntry.toURL();

                var fileTransfer = new FileTransfer();
                fileEntry.remove();

                fileTransfer.download(
                    encodeURI(url),
                    sPath,
                    function(theFile) {
                        console.log("download complete: " + theFile.toURI());
                        success(theFile);
                    },
                    function(error) {
                        console.log("download error source " + error.source);
                        console.log("download error target " + error.target);
                        console.log("upload error code: " + error.code);
                        fail(error);
                    }
                );




            },
            fail
        );


    };

    this.read_file = function(dir, filename, success, fail){
        // console.log(dir);
        fail = (typeof fail == 'undefined')? Log('FileManager','read file fail'): fail;
        this.load_file(
            dir,
            filename,
            function(fileEntry){
                fileEntry.file(
                    function(file){
                        var reader = new FileReader();

                        reader.onloadend = function(evt) {

                            success(evt.target.result);
                        };

                        reader.readAsText(file);
                    },
                    fail
                );

            },
            fail
        );
    };

    this.write_file = function(dir, filename, data, success, fail){
        fail = (typeof fail == 'undefined')? Log('FileManager','write file fail'): fail;
        this.load_file(
            dir,
            filename,
            function(fileEntry){
                fileEntry.createWriter(
                    function(writer){
                        Log('FileManager','mesg')('writing to file: '+filename);
                        writer.onwriteend = function(evt){
                            Log('FileManager','mesg')('file write success!');
                            success(evt);
                        }
                        writer.write(data);
                    },
                    fail
                );
            },
            fail
        );

        //
    };


    this.remove_file = function(dir, filename, success, fail){
        var full_file_path = dir+'/'+filename;
        fileSystemSingleton.load(
            function(fs){

                // get file handler
                fs.root.getFile(full_file_path, {create: false, exclusive: false}, function(fileEntry){fileEntry.remove(success, fail);}, fail);
            }

        );
        //
    };
};




var ParallelAgregator = function(count, success, fail, bucket)
{
    ////System.log('success: aggregator count:'+count);
    var success_results = [];
    var fail_results = [];
    var success_results_labeled = {};
    var ini_count = 0;
    var log_func= function(the_data){
        //console.log(the_data)
    }
    var object = this;
    current_bucket = (typeof bucket == 'undefined')? 'aggregator' : bucket;
    var success_callback =  (typeof success == 'undefined')? log_func : success;
    var fail_callback = (typeof fail == 'undefined')? log_func: fail;



    this.success = function(label){
        return function(result){
            //System.log('one aggregator success!',current_bucket);
            ini_count++;
            success_results.push(result);
            if(!success_results_labeled[label]){
                success_results_labeled[label] = [];
            }
            success_results_labeled[label].push(result);
            //System.log('success: aggregator count:'+ini_count,current_bucket);
            object.call_success_or_fail();
        }
    };

    this.call_success_or_fail = function(){
        if(ini_count == count){
            //System.log('aggregator complete',current_bucket);
            if(success_results.length == count)
            {
                //System.log('aggregator success',current_bucket);
                success_callback(success_results_labeled);
            }
            else{
                //System.log('aggregator fail',current_bucket);
                fail_callback({success:success_results,fail:fail_results});
            }
        }
    };

    this.fail = function(result){
        //System.log('one aggregator fail!',current_bucket);
        ini_count++;
        fail_results.push(result);
        //System.log('fail: aggregator count:'+ini_count, current_bucket);
        this.call_success_or_fail();
    }
}

/**

 TEST CODE:
 var a=	function(){
		alert('aaab');

		console.log('aaab');
		//CREATE A DIRECTORY
		var a = new DirManager();
        a.create_r('hola/jorge',Log('complete/jorge'));
        a.remove('hola/jorge',Log('complete delte'), Log('delete fail'));



        var b = new FileManager();
        // LOAD A FILE
        b.load_file('cosa','jorge.txt',Log('FileManager','mesg'),Log('FileManager','mesg'));
        // READ A FILE
        b.read_file('cosa','jorge.txt',Log('FileManager','mesg'));
        // WRITE TO A FILE
        b.write_file('cosa','jorge.txt','uyyy',Log('FileManager','mesg'));
        b.download_file('http://www.greylock.com/teams/42-Josh-Elman','cosa','jcv.txt',Log('downloaded'));
        a.list('cosa', Log('List'));


}
 document.addEventListener('deviceready', a, false);
 */

/**
 * AppUpdater: What this is all about
 */

var AppUpdater = function(info_url, onprogress, onsuccess, onfail){

    var selfie = this;


    selfie.onprogress =  (typeof onprogress == 'undefined')?
        function(current, total){
            Log('Progress')((current/total));
        }:
        onprogress;

    onsuccess = (typeof onsuccess == 'undefined')? Log('update sucess') : onsuccess;
    onfail = (typeof onsuccess == 'undefined')? Log('update sucess') : onfail;

    var file_manager = new FileManager();

    selfie.all_files_updated = function(){
        file_manager.get_path(
            '.apps/'+selfie.version,
            'index.html',
            function(path){
                onsuccess();
                // this is where we update the location and reload the app
                window.location=path;
            }
        );

    }

    selfie.update_local_version_variable = function(){
        file_manager.write_file('.app_vars', 'version',selfie.version ,selfie.all_files_updated, Log('app_vars_fail'));

    }

    selfie.update_from_remote_server = function(){


        var aggregator = new ParallelAgregator(
            selfie.update_remote_info.files.length,
            selfie.update_local_version_variable,
            onfail
        );
        var count = 0;
        for(var index in selfie.update_remote_info.files){
            console.log(file_path);
            var file_path=selfie.update_remote_info.files[index];
            var file_name = file_path.split('/').pop();
            console.log('file_name:'+file_name );
            var r = /[^\/]*$/;
            var folder = '.apps/'+selfie.version+file_path.replace(r, '');
            console.log('folder:'+folder );
            var url = selfie.update_remote_info['base_url']+file_path;
            console.log('url:'+url );
            file_manager.download_file(
                url,
                folder,
                file_name,
                function(index){

                    index = count;
                    count++;
                    return function(args){
                        console.log(index);
                        selfie.onprogress((index+2),(selfie.update_remote_info.files.length+1));
                        aggregator.success(index)(args);
                    }

                }(index)
                ,
                aggregator.fail
            );
        }
    }

    selfie.handle_update_info = function(data){


        selfie.version = MD5(JSON.stringify(data));

        if(selfie.version == selfie.current_version){
            console.log('loading app directly from file');
            selfie.all_files_updated();
            return;
        }

        //data = JSON.parse(data);


        console.log(selfie.version);
        selfie.onprogress(1,(data.files.length+1));
        selfie.update_remote_info =  data;

        var dir_manager = new DirManager();
        dir_manager.create_r('.apps/'+selfie.version,selfie.update_from_remote_server);

    };

    selfie.handle_update_ajax_fail = function(){
        onfail();
    };

    selfie.current_version = false;

    selfie.call_for_remote_data = function(){
        atomic.get(info_url)
            .success(selfie.handle_update_info)
            .error(selfie.handle_update_ajax_fail);

    }

    selfie.app_vars_read = function(text){
        console.log('text:   '+text);
        selfie.current_version = text;
        selfie.call_for_remote_data();

    }

    selfie.load_local_app = function(){
        file_manager.read_file('.app_vars','version',selfie.app_vars_read, Log('app_vars_fail'));
    };

    selfie.constructor = function(){
        selfie.load_local_app();
        return selfie;
    }

    return selfie.constructor();




}

/**
 //Test code
 var a=	function(){
	    AppUpdater('http://localhost:3000/mobile_app/app_info');



}
 document.addEventListener('deviceready', a, false);

 **/




;(function() {
"use strict";

//
// Enhance the built-in angularjs ogger with some extra features (e.g. printing the timestamp, and logging the number
// of AngularJS watchers in debug mode).
//

appModule('app.firebase')

  .factory('fbutil', ['FirebaseConfiguration', '$window', function (FirebaseConfiguration, $window) {

    var ref = function (path) {
      return new $window.Firebase(FirebaseConfiguration.url + (path || ''));
    };

    return {
      ref: ref
    };
  }])
;
}());

;(function () {
  "use strict";

  var IntroHeader = function () {
    return ({
      restrict: 'E',
      replace: true,
      scope: {
        img: '@'
      },
      templateUrl: 'js/app/intro/intro-header.html'
    });
  };

  appModule('app.intro').directive('introHeader', IntroHeader);
}());

;(function() {
"use strict";

var IntroCtrl = /*@ngInject*/['$scope', '$state', '$ionicSlideBoxDelegate', '$ionicScrollDelegate', 'Application', function ($scope, $state, $ionicSlideBoxDelegate, $ionicScrollDelegate, Application) {
  // vm: the "Controller as vm" convention from: http://www.johnpapa.net/angularjss-controller-as-and-the-vm-variable/
  var vm = this;

  // when entering the view, always go to the first slide (instead of just showing whichever slide was shown last when
  // you left the view)
  $scope.$on('$ionicView.beforeEnter', function () {
    vm.slideIndex = 0;
    $ionicSlideBoxDelegate.slide(0);
    $ionicScrollDelegate.scrollTop();
  });

  vm.startApp = function () {
    // user has viewed (all or part of) the intro, set 'initialRun' to false so that next time when opening the app the
    // intro doesn't show up again automatically (it can always be opened manually from the menu)
    Application.setInitialRun(false);

    // go to the start page (after 'initialRun' has been set to false)
    Application.gotoStartPage($state);
  };
  vm.next = function () {
    $ionicSlideBoxDelegate.next();
    $ionicScrollDelegate.scrollTop();
  };
  vm.previous = function () {
    $ionicSlideBoxDelegate.previous();
    $ionicScrollDelegate.scrollTop();
  };

  vm.slideChanged = function (index) {
    vm.slideIndex = index;
  };
}];
IntroCtrl.$inject = ['$scope', '$state', '$ionicSlideBoxDelegate', '$ionicScrollDelegate', 'Application'];

appModule('app.intro').controller('IntroCtrl', IntroCtrl);
}());

;(function() {
"use strict";

appModule('app.intro')
  .config(['$stateProvider', function ($stateProvider) {
    $stateProvider
      .state('app.intro', {
        url: '/intro',
        views: {
          'menuContent@app': {
            templateUrl: 'js/app/intro/intro.html',
            controller: 'IntroCtrl as vm'
          }
        }
      });
  }]);
}());

;(function() {
"use strict";

var DemoCtrl = /*@ngInject*/['Application', '$scope', '$http', 'UserService', '$state', '$ionicPopup', 'Restangular', 'UserData', function (Application, $scope, $http,UserService,$state,$ionicPopup,Restangular,UserData) {  // user is injected through UI-router resolve on the abstract state 'auth'
    if (!Application.isUserLoggedIn()) {
        $state.go('login');
    }

    try {
        var user = UserData.getData()[0];




    Restangular.all(user.properties.Url + '?children=true').getList()
        .then(function (data) {

            $scope.securedrive =false;
            $scope.tripmanagement =false;

            for (var i = 0; i < data.length; i++) {

                switch (data[i].class[0]) {
                    case 'SecureDriveList':
                        $scope.securedrive = true;
                        break;
                    case 'TripManagementList':
                        $scope.tripmanagement =true;
                        break;

                    default:
                        break;
                }


            }
        });
}
    catch(e){
        return;
    }
    $scope.showAlert = function() {

        Restangular.oneUrl('/eapi/submission/send_sms/2/2.0?username=qz2rg4&password=Access99&message=ArcApp&msisdn=27833267925', 'http://bulksms.2way.co.za' ).get()

            .then(function(sms) {
                var alertPopup = $ionicPopup.alert({
                    title: 'Alert',
                    template: 'An Emergency message has been sent'
                });
            });


    };


}];
DemoCtrl.$inject = ['Application', '$scope', '$http', 'UserService', '$state', '$ionicPopup', 'Restangular', 'UserData'];

appModule('app.mainPage').controller('DemoCtrl', DemoCtrl);
}());
;(function() {
    "use strict";

    appModule('app.mainPage')
        .service('GlobService', ['$cordovaGlobalization', function ($cordovaGlobalization) {



          var LocaleName =   $cordovaGlobalization.getLocaleName().then(
                function (result) {
                    // result
                },
                function (error) {
                    // error
                });

          return {
              language: lanuage,
              LocaleName: LocaleName
          }
        }])
}());

//;(function() {
//"use strict";
//
//appModule('app.mainPage')
//  .config(function ($stateProvider) {
//    $stateProvider
//
//      .state('app.auth.main', {
//        url: "/main",
//        abstract: true,
//        views: {
//          'menuContent@app': {
//            templateUrl: "js/app/mainPage/tabs.html"
//          }
//        }
//      })
//
//      // Note: each tab has its own nav history stack
//      .state('app.auth.main.dash', {
//        url: '/dash',
//        views: {
//          'main-dash': {
//            templateUrl: 'js/app/mainPage/dash.html',
//            controller: 'DashCtrl as vm'
//          }
//        }
//      })
//      .state('app.auth.main.chats', {
//        url: '/chats',
//        views: {
//          'main-chats': {
//            templateUrl: 'js/app/mainPage/chats.html',
//            controller: 'ChatsCtrl as vm'
//          }
//        }
//      })
//      .state('app.auth.main.chat-detail', {
//        url: '/chats/:chatId',
//        views: {
//          'main-chats': {
//            templateUrl: 'js/app/mainPage/chatDetail.html',
//            controller: 'ChatDetailCtrl as vm'
//          }
//        }
//      })
//      .state('app.auth.main.account', {
//        url: '/account',
//        views: {
//          'main-account': {
//            templateUrl: 'js/app/mainPage/account.html',
//            controller: 'AccountCtrl as vm'
//          }
//        }
//      });
//  })
//;
//}());

;(function() {
"use strict";

var secureDriveController = /*@ngInject*/['$scope', '$http', function ($scope,$http) {  // user is injected through UI-router resolve on the abstract state 'auth'
    $scope.rate = 3;
    $scope.max = 5;
    $scope.store = {};

    $scope.store.products = [];


    $http.get('http://api.randomuser.me/?results=5&gender=male').success(function (data) {

        $scope.items = data.results;
    });

    $scope.CallTel = function (tel) {
        window.location.href = 'tel:' + tel;
    }
}];
secureDriveController.$inject = ['$scope', '$http'];

appModule('app.mainPage').controller('secureDriveController', secureDriveController);
}());
;(function() {
"use strict";

var securedriveListCtrl = /*@ngInject*/['$scope', '$rootScope', '$ionicSideMenuDelegate', 'loggingService', 'Application', '$ionicNavBarDelegate', '$state', 'UserData', 'Restangular', 'Server', '$cordovaGlobalization', '$ionicModal', '$sce', '$interval', function ($scope,$rootScope, $ionicSideMenuDelegate,loggingService,Application,$ionicNavBarDelegate,$state,UserData,Restangular,Server,$cordovaGlobalization,$ionicModal,$sce,$interval) {
    $scope.goTo = function (hash) {
        console.log('goTo clicked - '+ hash);
        $state.go(hash);
    };
 $scope.$on('$ionicView.enter', function () {

    $ionicNavBarDelegate.showBar(true);


    });

    $scope.w =  window.screen.width;
    $scope.h = window.screen.height;

    if ($scope.w > 1000) {$scope.w =350;}


        $scope.currentProjectUrl = $sce.trustAsResourceUrl($scope.surveymonkeyUrl);

 var data = UserData.getData();

    var user =  data[0];
    $scope.url = Server.url;
    //$scope.items = Restangular.all(user.properties.Url +'/secure-drive?children=true').getList().$object;
    Restangular.all(user.properties.Url +'/secure-drive?children=true').getList()  // GET: /users
        .then(function(data) {
            debugger;
        $scope.items = data;

        })

    $scope.url = Server.url;
    $scope.country = $rootScope.country;

    var url = $scope.country.url;
    Restangular.one(url ).get()
        .then(function(data) {

            $scope.ContactNumbers =[];
            $scope.countryinfo = data;
            for(var i=0;i<data.entities.length;i++) {
                switch (data.entities[i].class[0]) {
                    case 'ContactNumber':
                        $scope.ContactNumbers.push(data.entities[i]);

                    default:
                        break;
                }

            }

        });

    $ionicModal.fromTemplateUrl('car-modal.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal1) {
        $scope.modal1 = modal1
    })
    $scope.openModal1 = function(driver) {


        Restangular.all('/team/?descendants=TeamMember&where=Id eq ' + driver ).getList()
            .then(function(teammemberdata) {

                $scope.teammemberdata =  teammemberdata[0].properties;


            });
        $scope.url = Server.url;

        $scope.modal1.show()
    }

    $scope.closeModal1 = function() {
        $scope.modal1.hide();
    };

    $scope.$on('$destroy', function() {
        $scope.modal1.remove();
    });



    $ionicModal.fromTemplateUrl('team-modal.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal2) {
        $scope.modal2 = modal2
    })
    $scope.openModal2 = function( team) {
        $scope.teamarray = team.split(',');

        $scope.modal2.show()
    }

    $scope.closeModal2 = function() {
        $scope.modal2.hide();
    };

    $scope.$on('$destroy', function() {
        $scope.modal2   .remove();
    });







$scope.iframeload = function(){

try {
    var f = $('#f');

    f.contents().find('footer').hide();
    f.contents().find('a').hide();



}
    catch(e)
   {

    }


}
    $scope.callAtInterval = function() {
        if($("#f").contents().text().search("Thank you for completing our survey!")!=-1){
            $interval.cancel($scope.callAtInterval);
            $scope.closeModal3();
        }
    }





var count = 0;






    $ionicModal.fromTemplateUrl('survey-modal.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal3) {
        $scope.modal3 = modal3
    })
    $scope.openModal3 = function(trip) {



        Restangular.one(user.properties.Url +'/secure-drive/'+ trip.replace(/ /g,'-')).get()
            .then(function(data) {

               var sm = data.properties.secureDriveSurveyMonkeyUrl.value;
                if (!sm)
                {
                    Restangular.one($rootScope.country).get()
                        .then(function(data) {

                          sm =  data.properties.secureDriveSurveyMonkeyUrl.value;
                        });
                }
                $scope.secureDriveSurveyMonkeyUrl = $sce.trustAsResourceUrl(sm);

            });
        $scope.url = Server.url;
        Application.showLoading(true);
        setTimeout(function () {
            Application.hideLoading();
    }, 5000);
        $interval( function(){ $scope.callAtInterval(); }, 5000);
        $scope.modal3.show()
    }

    $scope.closeModal3 = function() {
        Application.hideLoading();
        $scope.modal3.hide();
    };

    $scope.$on('$destroy', function() {
        $scope.modal3.remove();
    });   
    
    
    
    
    
    
    
    
    
    
    
    
    
}];
securedriveListCtrl.$inject = ['$scope', '$rootScope', '$ionicSideMenuDelegate', 'loggingService', 'Application', '$ionicNavBarDelegate', '$state', 'UserData', 'Restangular', 'Server', '$cordovaGlobalization', '$ionicModal', '$sce', '$interval'];

appModule('app.mainPage').controller('securedriveListCtrl', securedriveListCtrl);
}());

;(function() {
"use strict";

var ForgotPasswordCtrl = /*@ngInject*/['$scope', '$state', '$translate', 'Application', 'UserService', function ($scope, $state, $translate, Application, UserService) {
  // vm: the "Controller as vm" convention from: http://www.johnpapa.net/angularjss-controller-as-and-the-vm-variable/
  var vm = this;
  var log = Application.getLogger('ForgotPasswordCtrl');

  $scope.$on('$ionicView.beforeEnter', function () {
    Application.resetForm(vm);
    vm.user = {};
  });

  vm.reset = function (form) {
    if (!form.$valid) {
      return;
    }

    Application.showLoading(true);

    UserService.resetPassword(vm.user.email).then(function () {
        Application.hideLoading();

        log.info("Password reset successfully");

        // go to the login page, displaying a message asking the user to verify their email
        $state.go('login', {verifyEmail: 'verify'});
      })
      .catch(function (error) {
        Application.hideLoading();

        if (error == "invalid_email") {
          vm.errorMessage('message.not-registered');
        } else {
          vm.errorMessage('message.unknown-error');
        }
      });
  };

  vm.login = function () {
    $state.go('login');
  };

  vm.errorMessage = function (key, vars) {
    $translate(key, vars || {}).then(function (translation) {
      vm.error.message = translation;
    });
  };

}];
ForgotPasswordCtrl.$inject = ['$scope', '$state', '$translate', 'Application', 'UserService'];

// controller and router
appModule('app.auth.forgotPassword')
  .controller('ForgotPasswordCtrl', ForgotPasswordCtrl)
  .config(['$stateProvider', function ($stateProvider) {
    $stateProvider
      .state('forgotPassword', {
        url: '/forgotPassword',
        templateUrl: 'js/app/auth/forgotPassword/forgotPassword.html',
        controller: 'ForgotPasswordCtrl as vm'
      });
  }])
;
}());

;(function () {
  "use strict";

  var LoginCtrl = /*@ngInject*/['$scope', '$state', '$stateParams', 'Application', 'UserService', '$translate', '$ionicContentBanner', '$rootScope', '$localstorage', function ($scope, $state, $stateParams, Application, UserService, $translate,
                                         $ionicContentBanner,$rootScope,$localstorage) {
    var vm = this;
    var isIOS = ionic.Platform.isIOS();
    $scope.hidelogo =false;
    $scope.$on('$ionicView.beforeEnter', function () {
      // enforce/ensure no logged in user at this point
      UserService.logout();
      vm.version = $rootScope.version;
      Application.resetForm(vm);

      vm.user = $localstorage.getObject('login');

      //vm.user = {
      //  username: 'anton@interon.co.za' ,
      //  password: 'password'
      //};


    });
    $scope.focus = function(){
     if(isIOS)
     {
       return;
     }
      $scope.hidelogo =true;
    }
    $scope.blur = function(){
      if(isIOS)
      {
        return;
      }
      $scope.hidelogo =false;
    }
    var closeContentBanner = null;

      // the ionic-content-banner needs to be displayed in the 'enter' event because it will only work if the view
      // is displayed completely
      $scope.$on('$ionicView.enter', function () {

        if ($stateParams.verifyEmail) {
          var messageKey;
          var messageParams;

          if ($stateParams.verifyEmail === 'verify') {
            messageKey = 'message.check-your-email';
          } else {    // $stateParams.verifyEmail === 'notVerified'
            messageKey = 'message.email-not-verified';
          }

          $translate(messageKey).then(function (translation) {
            closeContentBanner = $ionicContentBanner.show({text: [translation]});
          });
        }
    });

    // before we leave the view then close/destroy the ionic-content-banner, if any
    $scope.$on('$ionicView.beforeLeave', function () {
      if (closeContentBanner) {
        closeContentBanner();
      }
    });

    vm.login = function (form) {

      if (!form.$valid) {
        vm.user = {
          username: '' ,
          password: ''
        };

        $localstorage.setObject('login', vm.user);
        return;
      }
   
      Application.showLoading(true);

      UserService.login(('' + vm.user.username).toLowerCase(), vm.user.password).then(function (loggedinUser) {


            //Ionic.io();
            //var user = Ionic.User.current();
            //// if the user doesn't have an id, you'll need to give it one.
            //if (!user.id) {
            //  //user.id = Ionic.User.anonymousId();
            //  user.id =  UserService.email;
            //  user.set('Country', $rootScope.country.name);
            //}
            //user.save();
        Application.hideLoading();

        // user logged in implies the user is registered
        Application.setUserRegistered(true);

            $localstorage.setObject('login', vm.user);
           // $rootScope.$on("data_shared",function(){
             // debugger;
              var userdata =   $localstorage.getObject('user');
            if(!userdata)
            {
              vm.errorMessage('message.invalid-credentials');
              return;
            }
              if (userdata.type=='team')
              {
                $state.go('opstriplist');
              }
              else
              {
                $state.go('demo');
              }

             // Application.gotoStartPage($state);

           // })

      })
        .catch(function (error) {
          Application.hideLoading();

          // login failed, check error to see why
          if (error == "invalid_credentials") {
            vm.errorMessage('message.invalid-credentials');
          } else if (error == "not_verified") {
            vm.errorMessage('message.email-not-verified');
          } else {
            vm.errorMessage('message.unknown-error');
          }
        });
    };

    vm.forgot = function () {
      $state.go('forgotPassword');
    };

    vm.signup = function () {
      $state.go('signup');
    };

    vm.intro = function () {
      Application.gotoIntroPage($state);
    };

    vm.errorMessage = function (key, vars) {
      $translate(key, vars || {}).then(function (translation) {
        vm.error.message = translation;
      });
    };

  }];
  LoginCtrl.$inject = ['$scope', '$state', '$stateParams', 'Application', 'UserService', '$translate', '$ionicContentBanner', '$rootScope', '$localstorage'];

  appModule('app.auth.login').controller('LoginCtrl', LoginCtrl);
}());

;(function() {
"use strict";

appModule('app.auth.login')
  .config(['$stateProvider', function ($stateProvider) {
    $stateProvider
      .state('login', {
        url: '/login?verifyEmail',
        templateUrl: 'js/app/auth/login/login.html',
        controller: 'LoginCtrl as vm'
      })
      .state('loggedout', {
        url: '/loggedout',
        templateUrl: 'js/app/auth/login/loggedout.html',
        controller: 'LogoutCtrl as vm'
      });
  }]);
}());

;(function() {
"use strict";

var LogoutCtrl = /*@ngInject*/['$state', 'Application', function ($state, Application) {
  var vm = this;

  vm.intro = function () {
    Application.gotoIntroPage($state);
  };
}];
LogoutCtrl.$inject = ['$state', 'Application'];

appModule('app.auth.login').controller('LogoutCtrl', LogoutCtrl);
}());

;(function() {
"use strict";

var SignupCtrl = /*@ngInject*/['$scope', '$state', 'Application', 'UserService', '$translate', function ($scope, $state, Application, UserService, $translate) {
  // vm: the "Controller as vm" convention from: http://www.johnpapa.net/angularjss-controller-as-and-the-vm-variable/
  var vm = this;
  var log = Application.getLogger('SignupCtrl');

  $scope.$on('$ionicView.beforeEnter', function() {
    Application.resetForm(vm);
    vm.user = {};
  });

  vm.signup = function(form) {

    if(!form.$valid) {
      return;
    }

    Application.showLoading(true);

    var user = {
      username: vm.user.email,
      password: vm.user.password,
      email: vm.user.email,
      fullName: vm.user.name
    };

    UserService.signup(user).then(function (signedupUser) {
        Application.hideLoading();
        Application.setUserRegistered(true);

        log.info("User signed up successfully");

        // go to the login page, optionally displaying a message asking the user to verify their email
        $state.go('login', !signedupUser.emailVerified ? {verifyEmail: 'verify'} : {});
      })
      .catch(function (error) {
        Application.hideLoading();

        if (error == "invalid_email") {
          vm.errorMessage('message.valid-email');
        } else if (error == "already_registered") {
          vm.errorMessage('message.already-registered');
        } else {
          vm.errorMessage('message.unknown-error');
        }
      });
  };

  vm.intro = function () {
    Application.gotoIntroPage($state);
  };

  vm.login = function() {
    $state.go('login');
  };

  vm.errorMessage = function (key, vars) {
    $translate(key, vars || {}).then(function (translation) {
      vm.error.message = translation;
    });
  };

}];
SignupCtrl.$inject = ['$scope', '$state', 'Application', 'UserService', '$translate'];

appModule('app.auth.signup').controller('SignupCtrl', SignupCtrl);
}());

;(function() {
"use strict";

appModule('app.auth.signup')
  .config(['$stateProvider', function ($stateProvider) {
    $stateProvider
      .state('signup', {
        url: '/signup',
        templateUrl: 'js/app/auth/signup/signup.html',
        controller: 'SignupCtrl as vm'
      });
  }]);
}());

;(function() {
"use strict";

appModule('app.mainPage')

// COPIED FROM IONIC TABS STARTER APP
.factory('Chats', function() {
  // Might use a resource here that returns a JSON array

  // Some fake testing data
  var chats = [{
    id: 0,
    name: 'Ben Sparrow',
    lastText: 'You on your way?',
    face: 'https://pbs.twimg.com/profile_images/514549811765211136/9SgAuHeY.png'
  }, {
    id: 1,
    name: 'Max Lynx',
    lastText: 'Hey, it\'s me',
    face: 'https://avatars3.githubusercontent.com/u/11214?v=3&s=460'
  },{
    id: 2,
    name: 'Adam Bradleyson',
    lastText: 'I should buy a boat',
    face: 'https://pbs.twimg.com/profile_images/479090794058379264/84TKj_qa.jpeg'
  }, {
    id: 3,
    name: 'Perry Governor',
    lastText: 'Look at my mukluks!',
    face: 'https://pbs.twimg.com/profile_images/491995398135767040/ie2Z_V6e.jpeg'
  }, {
    id: 4,
    name: 'Mike Harrington',
    lastText: 'This is wicked good ice cream.',
    face: 'https://pbs.twimg.com/profile_images/578237281384841216/R3ae1n61.png'
  }];

  return {
    all: function() {
      return chats;
    },
    remove: function(chat) {
      chats.splice(chats.indexOf(chat), 1);
    },
    get: function(chatId) {
      for (var i = 0; i < chats.length; i++) {
        if (chats[i].id === parseInt(chatId)) {
          return chats[i];
        }
      }
      return null;
    }
  };
});
}());

;(function() {
  "use strict";

  appModule('app.user')

    //
    // A simple model object.
    //
    // Inspired by: https://medium.com/opinionated-angularjs/angular-model-objects-with-javascript-classes-2e6a067c73bc
    //

    .factory('Sms', function () {



    })

  ;
}());

;(function () {
  "use strict";

  var SmsCtrl = /*@ngInject*/['$scope', '$state', '$stateParams', 'Application', 'UserService', '$translate', '$ionicContentBanner', function ($scope, $state, $stateParams, Application, UserService, $translate,
                                         $ionicContentBanner) {
    $ionicNavBarDelegate.showBackButton(true);
    $scope.$on('$ionicView.beforeEnter', function (event, viewData) {
      viewData.enableBack = true;


    });

    $scope.sms = function () {
      var number = '0833267925';
      var message = 'Emergency : Locate -The client';


      //CONFIGURATION
      var options = {
        replaceLineBreaks: false, // true to replace \n by a new line, false by default
        android: {
          intent: 'INTENT'  // send SMS with the native android SMS messaging

        }
      };

      var success = function () { alert('Message sent successfully'); };
      var error = function (e) { alert('Message Failed:' + e); };
      sms.send(number, message, options, success, error);

    };

  }]
  SmsCtrl.$inject = ['$scope', '$state', '$stateParams', 'Application', 'UserService', '$translate', '$ionicContentBanner'];
  appModule('app.sms').controller('smsCtrl', SmsCtrl);
}());

;(function() {
"use strict";

appModule('app.tracking')

   // Conditional DI, technique taken from:
   // http://phonegap-tips.com/articles/conditional-dependency-injection-with-angularjs.html

  .factory('Tracking', ['$injector', 'APP', function ($injector, APP) {
    if (APP.devMode) {
      return $injector.get('TrackingMockImpl');
    } else {
      return $injector.get('TrackingIonicImpl');
    }
  }]);
}());



 appModule('app.mainPage').controller("alertsController", ['$scope', '$state', '$stateParams', function($scope,$state, $stateParams) {









 }]);

 appModule('app.mainPage').controller("countryInfoController", ['$scope', '$state', '$stateParams', '$rootScope', 'Restangular', 'Server', '$sce', function($scope,$state, $stateParams,$rootScope,Restangular,Server,$sce) {
     $scope.w =  window.screen.width;
     $scope.h = window.screen.height;

     if ($scope.w > 1000) {$scope.w =350;}

     $scope.url = Server.url;
     $scope.country = $rootScope.country;

     var url = $scope.country.url;
     Restangular.one(url +'?encodeHTML=false' ).get()
         .then(function(data) {

             $scope.ContactNumbers =[];
             $scope.ci = data;
             $scope.countryInfo = $sce.trustAsResourceUrl($scope.ci.properties.countryInfo.value);
             var html = $scope.ci.properties.countryPointsOfInterest.value.replace(/src="\/media\//g,"src=\"http://arcapp.interon.co.za/media/");
             $scope.poi =    html;

         });


 }]);



;(function() {
"use strict";

var opstripDetailsController = /*@ngInject*/['$scope', '$rootScope', '$ionicPlatform', '$ionicSideMenuDelegate', '$firebaseObject', 'loggingService', 'Application', '$ionicNavBarDelegate', '$ionicPopup', '$http', '$stateParams', 'Server', 'UserData', 'Restangular', '$cordovaEmailComposer', '$ionicModal', '$sce', '$ionicTabsDelegate', '$interval', function ($scope,$rootScope,$ionicPlatform, $ionicSideMenuDelegate,$firebaseObject,loggingService,Application,$ionicNavBarDelegate,$ionicPopup,$http,$stateParams,Server,UserData,Restangular,$cordovaEmailComposer,$ionicModal,$sce,$ionicTabsDelegate, $interval) {
    var  eventSource =null;
    $scope.$on('$ionicView.enter', function () {

        $ionicNavBarDelegate.showBar(true);
    });
    $scope.w =  window.screen.width;
    $scope.h = window.screen.height;


    $scope.modalFlightStats =null;
    if ($scope.w > 1000) {$scope.w =350;}
    $scope.hw = ';height:'+$scope.h+'px'+';width:'+ $scope.w + 'px';
    $scope.showSurvey= true;
    $scope.showNews =false;
    $scope.showTripAlerts =false;
    $scope.reload = false;
    //$scope.openRightSideMenu = function(){
    //    loggingService.log("triplist", "right button clicked");
    //
    //    $ionicSideMenuDelegate.toggleRight();
    //};
    Application.showLoading(true);
    $scope.teams = [];
    $scope.oteams = [];
    $scope.vteams = [];
    $scope.showflighttab = false;
$scope.body;
    function splitor (s)
    {

        if (s != '')
        {
            try
            {
                   return s.split(',');
            }
            catch(e)
            {
                var ss = [];
                return ss.push(s);
            }

        }
    }
    $rootScope.tripId = $stateParams.Id;
    Restangular.one('?currentmodel='+ $stateParams.Id+'&nocache=true&resolvecontent=country,tripOperationalPlan').get()
        .then(function(data) {

            $scope.triplist = [];
            $scope.countries = [];
            $scope.ops = [];
            $scope.memberCountryDetails = [];
            $scope.tripdetails = data.properties;
            $scope.flightstatsurl = "";
            $scope.showops = false;
            $scope.contactnos = [];
            $scope.flightArrivalDetails = [];
            $scope.flightDepartureDetails = [];
            $scope.securityTeamMembers = [];
            $scope.otherTeamMembers = [];
            $scope.teamMember = [];
            $scope.SurveyUrl = "";
            $scope.News =[];
            $scope.iswindows = false;
            if($scope.tripdetails.tripAlerts.value)
            {
                $scope.showTripAlerts = true;
            }
            if(data.entities !== undefined) {

                if(data.entities) {

                for (var i = 0; i < data.entities.length; i++) {

                    switch(data.entities[i].class[0]) {
                        case 'EmbeddedNews':

                            $scope.showNews = true;
                            $scope.News.push(data.entities[i]);
                            break;
                        case 'ContactNumber':
                            $scope.contactnos.push(data.entities[i]);
                            break;

                        case 'Country':
                            $scope.countries.push(data.entities[i]);

                            break;
                        case 'EmbeddedFlightArrivalDetails':

                            $scope.flightArrivalDetails.push(data.entities[i]);

                            $scope.showflighttab =true;

                            break;
                        case 'EmbeddedFlightDepartureDetails':
                            $scope.flightDepartureDetails.push(data.entities[i]);
                            $scope.showflighttab =true;

                            break
                        case 'EmbeddedCkeditor':
                            $scope.ops.push(data.entities[i]);
                            $scope.showops = true;
                            break;
                        case 'EmbeddedImages':
                            $scope.ops.push(data.entities[i]);
                            $scope.showops = true;
                            break;
                        default:
                            break;
                    }

                }
            }
            }

            Restangular.one('?currentmodel='+ $scope.tripdetails.country.value ).get()
                .then(function(country) {

                    console.log(country);
                    $scope.country = country;

                    $scope.showAlert = function () {
                        var alertPopup = $ionicPopup.alert({
                            title: 'Country Alert',
                            template: country.properties.countryWarnings.value
                        });

                    };
                    Application.hideLoading();

                    if(country.properties.countryWarnings.value != "" && country.properties.countryWarnings.value !==null)
                    {
                        $scope.showAlert();
                    }

                });
            $scope.SurveyMonkeyUrl = $sce.trustAsResourceUrl(data.properties.surveyMonkeyUrl.value);
            $scope.AcuWeatherUrl = $sce.trustAsResourceUrl(data.properties.acuWeatherUrl.value);
            if(ionic.Platform.isWindowsPhone())
            {
              $scope.iswindows = true;

            }
            var securityTeamMembers =  splitor(data.properties.securityTeam.value);
            var otherTeamMemberArrays = splitor(data.properties.clientTeamContactInfo.value);
            var _teams = securityTeamMembers;
            for(var i=0;i<_teams.length;i++)
            {

                Restangular.one('?currentmodel='+ _teams[i] +'&children=true'+ '&nocache=true&resolvecontent=memberCountryVisiting').get()
                    .then(function(team) {
                        try {

                            if (team.entities.length > 0) {

                                for (var x =0; x<team.entities.length;x++) {
                                    switch (team.entities[x].class[0]) {
                                        case 'MemberCountryDetails':

                                            if($scope.country.properties.Id.value == team.entities[x].properties.memberCountryVisiting.value)
                                            {

                                                //team.properties.tmContactNo.value = team.entities[x].properties.memberCountryContactNumber.value;
                                                team.properties.tmContactNoLocal.value = team.entities[x].properties.memberCountryContactNumber.value;
                                                team.properties.tmVehicle.value = team.entities[x].properties.memberCountryVehicalDescription.value;
                                            }

                                            break;

                                        //case 'Country':
                                        //    $scope.countries.push(data[i]);
                                        //    break;
                                        //case 'Country':
                                        //    $scope.countries.push(data[i]);
                                        //    break;
                                        default:

                                            break;
                                    }
                                }
                            }
                        }
                        catch
                            (e)
                            {

                            }

                        $scope.teams.push(team.properties);

                    });

            }
            var _teams = otherTeamMemberArrays;
            for(var i=0;i<_teams.length;i++)
            {

                Restangular.one('?currentmodel='+ _teams[i] +'&nocache=true&resolvecontent=teamMemberCountryDetails,MemberCountryDetails').get()
                    .then(function(oteam) {
                        try {
                            if (oteam.entities.length > 0) {
                                for (var x =0; x<oteam.entities.length;x++) {
                                    switch (oteam.entities[x].class[0]) {
                                        case 'MemberCountryDetails':

                                            if($scope.country.properties.Id.value == oteam.entities[x].properties.memberCountryVisiting.value)
                                            {
                                                oteam.properties.tmContactNoLocal.value = oteam.entities[x].properties.memberCountryContactNumber.value;
                                                team.properties.tmVehicle.value = team.entities[x].properties.memberCountryVehicalDescription.value;
                                            }

                                            break;

                                        //case 'Country':
                                        //    $scope.countries.push(data[i]);
                                        //    break;
                                        //case 'Country':
                                        //    $scope.countries.push(data[i]);
                                        //    break;
                                        default:

                                            break;
                                    }
                                }
                            }
                        }
                        catch
                            (e)
                        {

                        }

                        $scope.oteams.push(oteam.properties);

                    });

            }



            //Restangular.one('?currentmodel='+ $scope.tripdetails.tripcountry.value + '&descendants=ContactNumber').get()
            //    .then(function(contactnos) {
            //
            //    $scope.contactnos = contactnos.entities;
            //
            //
            //
            //    });

            
            Restangular.all('?currentmodel='+ $scope.tripdetails.country.value +'?descendants=GeneralInfo' ).getList()
                .then(function(GeneralInfo) {
                    console.log('GeneralInfo->'+GeneralInfo);
                    $scope.GeneralInfo = GeneralInfo;



                });

        });


        $scope.url = Server.url;
    $scope.sendSMS = function(body) {
        $.post(
            "http://bulksms.2way.co.za/eapi/submission/send_sms/2/2.0",
            { username: "qz2rg4", password: "Access99" ,message:'ArcApp - ' + body,msisdn:"27833267925"},
                function(data){
                var alertPopup = $ionicPopup.alert({
                    title: 'Thank you',
                    template: 'A message has been sent -> ' + data
                });
            }
        );


    };

    $scope.showhtml = false;
    $scope.showimages = false;

    $ionicModal.fromTemplateUrl('modal.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal) {
        $scope.modal = modal
    });
    $scope.openModal = function(data) {

        for(var i = 0 ;i<$scope.ops.length;i++)
        {
            if($scope.ops[i].title == data) {
                if ($scope.ops[i].properties.embcontent) {
                    $scope.html = $scope.ops[i].properties.embcontent.value;
                    $scope.showhtml = true;
                    $scope.showimages  = false;
                }
                if ($scope.ops[i].properties.embimages) {
                    try {
                        $scope.images = $scope.ops[i].properties.embimages.value.split(',');
                    }
                    catch (e)
                    {$scope.images = $scope.ops[i].properties.embimages.value;}
                    $scope.showimages  = true;
                    $scope.showhtml = false;
                    Restangular.one('umbraco/api/media/GetMediaFromArray?array=' + $scope.images ).get()

                        .then(function(immagearray) {

                            $scope.immagearray = immagearray;
                        });
                }
            }
        }

        $scope.modal.show()
    };

    $scope.closeModal = function() {
        $scope.modal.hide();
    };

    $scope.$on('$destroy', function() {
        $scope.modal.remove();
    });









    $ionicModal.fromTemplateUrl('newsmodal.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal) {
        $scope.newsmodal = modal
    });

    $scope.openNewsModal = function(data) {

        for(var i = 0 ;i<$scope.News.length;i++)
        {
            if($scope.News[i].properties.bulletinTitle.value == data) {
               $scope.NewsDetails = $scope.News[i].properties.news.value;
            }
        }

        $scope.newsmodal.show()
    };

    $scope.closeModal = function() {
        $scope.newsmodal.hide();
    };

    $scope.$on('$destroy', function() {
        $scope.newsmodal.remove();
    });




























    $ionicModal.fromTemplateUrl('profile-modal.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal2) {
        $scope.modal2 = modal2
    });
    $scope.openModal2 = function( t) {

        $scope.tmprofile = t.tmprofile.value;
        $scope.modal2.show()
    };

    $scope.closeModal2 = function() {
        $scope.modal2.hide();
    };

    $scope.$on('$destroy', function() {
        $scope.modal2.remove();
    });















    $ionicModal.fromTemplateUrl('flightstats-modal.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(model) {

        $scope.fs = model;
    });

    $scope.openModalFlightStats = function(data) {

        var fl = data.properties.flightNumber.value.split(' ');
        var airline = fl[0];
        var no = fl[1];
        var start = new Date(data.properties.dateTime.value);

        var yyyy = start.getFullYear();
        var mm = start.getMonth()+1; // getMonth() is zero-based
        var dd  = start.getDate();
        var mydate = yyyy +'-' + mm +'-' + dd;
       var url =   'http://mobile.flightstats.com/go/Mobile/flightStatusByFlight.do?airline=%28'+airline +'%29&flightNumber='+no+'&departureDate='+mydate;
       $scope.flightstatsurl = $sce.trustAsResourceUrl(url);

        $scope.fs.show();

    };

    $scope.closeFlightStats = function() {
        $scope.fs.hide();
    };

    $scope.$on('$destroy', function() {
        $scope.fs.remove();
    });


    function flightStatus (fnumber,date) {



        //var sdToken = "NGQxYTExNWYtNTdmYi00ZWIxLWIwZmItYTQ4ODY3OTdhNzI3";
        //var issApi = 'https://api.flightstats.com/v2/json/flight/status/' + airline + '/' + no +'/dep/'+ thedate.getFullYear()+'/' + month +'/'+ thedate.getDate()+'/'+'/?appId=ae9e66d6&appKey=6f5d2b87e43c9b7af14706ed92c920cb&utc=true';
        //var myEventSource = streamdataio.createEventSource(issApi, sdToken);
        //
        //// open the streamdata.io connection
        //myEventSource.open();
        //
        //myEventSource.onData(function(data){        // initialize your data with the initial snapshot
        //    $scope.flightStatus = data;
        //    if (eventSource) {
        //        eventSource.close();
        //        eventSource = null;
        //    }
        //
        //}).onPatch(function(data){                  // update the data with the provided patch
        //    $scope.flightStatus = data;
        //    if (eventSource) {
        //        eventSource.close();
        //        eventSource = null;
        //    }
        //});










    }
    
    
    
    
    
    
    
    
    
    



    $scope.surveyClicked = function() {
        $ionicTabsDelegate.$getByHandle('secondTab').select(4);
        Application.showLoading(true);
        setTimeout(function () {
            Application.hideLoading();
        }, 5000);


    };
    $scope.weatherClicked = function() {
        var currSrc = $("#weather").attr("src");
        $("#weather").attr("src", currSrc);
        $ionicTabsDelegate.$getByHandle('secondTab').select(2);
        Application.showLoading(true);
        setTimeout(function () {
            Application.hideLoading();
        }, 5000);


    }

}];
opstripDetailsController.$inject = ['$scope', '$rootScope', '$ionicPlatform', '$ionicSideMenuDelegate', '$firebaseObject', 'loggingService', 'Application', '$ionicNavBarDelegate', '$ionicPopup', '$http', '$stateParams', 'Server', 'UserData', 'Restangular', '$cordovaEmailComposer', '$ionicModal', '$sce', '$ionicTabsDelegate', '$interval'];






appModule('app.mainPage').controller('opstripDetailsController', opstripDetailsController);
}());


;(function() {
"use strict";

var opstripListCtrl = /*@ngInject*/['$scope', '$ionicSideMenuDelegate', 'loggingService', 'Application', '$ionicNavBarDelegate', '$state', 'Restangular', 'UserData', 'Server', '$localstorage', function ($scope, $ionicSideMenuDelegate,loggingService,Application,$ionicNavBarDelegate,$state,Restangular,UserData,Server,$localstorage) {
    if (!String.prototype.includes) {
        String.prototype.includes = function() {'use strict';
            return String.prototype.indexOf.apply(this, arguments) !== -1;
        };
    }
    var userdata = $localstorage.getObject('user');
    $scope.showclient = true;

    $scope.goTo = function (hash) {
        console.log('goTo clicked - ' + hash);
        $state.go(hash);
    };
    $scope.$on('$ionicView.enter', function () {

        $ionicNavBarDelegate.showBar(true);

    });
    $scope.openRightSideMenu = function () {
        loggingService.log("triplist", "right button clicked");

        $ionicSideMenuDelegate.toggleRight();
    };

    $scope.doRefresh = function() {
        console.log('refresh');
        $state.reload();
        $scope.$broadcast('scroll.refreshComplete');
        $scope.$apply()
    };
    Application.showLoading(true);
    if (userdata.type = 'team'){
        $scope.showclient = false;
        Restangular.all('/trips-master/?descendants=TripDetails&resolvecontent=country&resolvemedia=buttonflag').getList()
            .then(function (data) {

                $scope.triplist = [];
                $scope.countries = [];
                $scope.opsText = [];
                $scope.opsImage = [];
                for(var i=0;i<data.length;i++)
                {

                    switch(data[i].class[0]) {
                        case 'TripDetails':
                            if(data[i].properties.clientTeamContactInfo.value.includes(userdata.id)||data[i].properties.securityTeam.value.includes(userdata.id) ) {
                                $scope.triplist.push(data[i]);
                            }
                            break;

                        case 'Country':
                            $scope.countries.push(data[i]);

                            break;
                        default:
                            break;
                    }




                }

                Application.hideLoading();
            });
}
    else
    {


    Restangular.all(user.properties.Url +'trip-management?children=true&resolvecontent=tripcountry&resolvemedia=buttonflag').getList()
        .then(function(data) {

            $scope.triplist = [];
            $scope.countries = [];
            $scope.opsText = [];
            $scope.opsImage = [];
            for(var i=0;i<data.length;i++)
            {

                switch(data[i].class[0]) {
                    case 'EmbeddedCkeditor':
                        $scope.opsText.push(data[i]);
                        break;
                    case 'EmbeddedImages':
                        $scope.opsImage.push(data[i]);
                        break;
                    case 'Trip':
                        $scope.triplist.push(data[i]);
                        break;
                    case 'Country':
                        $scope.countries.push(data[i]);

                        break;
                    default:
                        break;
                }




            }

            Application.hideLoading();


        });

    }



    $scope.url = Server.url;

}];
opstripListCtrl.$inject = ['$scope', '$ionicSideMenuDelegate', 'loggingService', 'Application', '$ionicNavBarDelegate', '$state', 'Restangular', 'UserData', 'Server', '$localstorage'];

appModule('app.mainPage').controller('opstripListCtrl', opstripListCtrl);
}());




;(function() {
"use strict";

var tripDetailsController = /*@ngInject*/['$scope', '$rootScope', '$ionicPlatform', '$ionicSideMenuDelegate', '$firebaseObject', 'loggingService', 'Application', '$ionicNavBarDelegate', '$ionicPopup', '$http', '$stateParams', 'Server', 'UserData', 'Restangular', '$cordovaEmailComposer', '$ionicModal', function ($scope,$rootScope,$ionicPlatform, $ionicSideMenuDelegate,$firebaseObject,loggingService,Application,$ionicNavBarDelegate,$ionicPopup,$http,$stateParams,Server,UserData,Restangular,$cordovaEmailComposer,$ionicModal) {

    $scope.$on('$ionicView.enter', function () {

        $ionicNavBarDelegate.showBar(true);
    });
    $scope.reload = false;
    $scope.openRightSideMenu = function(){
        loggingService.log("triplist", "right button clicked");

        $ionicSideMenuDelegate.toggleRight();
    };
    Application.showLoading(true);
    $scope.teams = [];




    $rootScope.tripId = $stateParams.Id;
    Restangular.one('?currentmodel='+ $stateParams.Id+'&nocache=true').get()
        .then(function(data) {
            
            $scope.triplist = [];
            $scope.countries = [];
            $scope.ops = [];
            $scope.memberCountryDetails = [];
            $scope.tripdetails = data.properties;
            $scope.showops = false;
            if(data.entities !== undefined) {
                $scope.showops = true;
                if(data.entities) {

                for (var i = 0; i < data.entities.length; i++) {

                    switch (data.entities[i].class[0]) {
                        case 'EmbeddedCkeditor':
                            $scope.ops.push(data.entities[i]);
                            break;
                        case 'EmbeddedImages':
                            $scope.ops.push(data.entities[i]);
                            break;

                        //case 'Country':
                        //    $scope.countries.push(data[i]);
                        //    break;
                        //case 'Country':
                        //    $scope.countries.push(data[i]);
                        //    break;
                        default:
                            break;
                    }

                }
            }
            }

            Restangular.one('?currentmodel='+ $scope.tripdetails.tripcountry.value ).get()
                .then(function(country) {

                    console.log(country);
                    $scope.country = country;

                    $scope.showAlert = function () {
                        var alertPopup = $ionicPopup.alert({
                            title: 'Country Alert',
                            template: country.properties.countryWarnings.value
                        });

                    };
                    Application.hideLoading();

                    if(country.properties.countryWarnings.value != "")
                    {
                        $scope.showAlert();
                    }

                });


            var _teams =$scope.tripdetails.tmtripTeam.value.split(',');
            for(var i=0;i<_teams.length;i++)
            {

                Restangular.one('?currentmodel='+ _teams[i] + '&resolvecontent=memberCountryVisiting').get()
                    .then(function(team) {
                        try {

                            if (team.entities.length > 0) {

                                for (var x =0; x<team.entities.length;x++) {
                                    switch (team.entities[x].class[0]) {
                                        case 'MemberCountryDetails':

                                            if($scope.country.properties.Id.value == team.entities[x].properties.memberCountryVisiting.value)
                                            {
                                                team.properties.tmContactNo.value = team.entities[x].properties.memberCountryContactNumber.value;
                                            }

                                            break;

                                        //case 'Country':
                                        //    $scope.countries.push(data[i]);
                                        //    break;
                                        //case 'Country':
                                        //    $scope.countries.push(data[i]);
                                        //    break;
                                        default:

                                            break;
                                    }
                                }
                            }
                        }
                        catch
                            (e)
                            {

                            }
                        debugger;
                        $scope.teams.push(team.properties);

                    });

            }



            

            Restangular.one('?currentmodel='+ $scope.tripdetails.tripcountry.value + '&descendants=ContactNumber').get()
                .then(function(contactnos) {

                $scope.contactnos = contactnos.entities;



                });

            
            Restangular.all('?currentmodel='+ $scope.tripdetails.tripcountry.value +'?descendants=GeneralInfo' ).getList()
                .then(function(GeneralInfo) {
                    console.log('GeneralInfo->'+GeneralInfo);
                    $scope.GeneralInfo = GeneralInfo;



                });

        });


        $scope.url = Server.url;

    $scope.flightStatus = function(fnumber,date) {
              var a = fnumber.spit(' ');
        var date_test = new Date("2011-07-14 11:23:00".replace(/-/g,"/"));
        var thedate = new Date(Date.parse(date_test));
        Restangular.oneUrl('/flex/flightstatus/rest/v2/json/flight/status/' + airline + '/' + no +'/dep/'+thedate +'/?appId=ae9e66d6&appKey=6f5d2b87e43c9b7af14706ed92c920cb&utc=true', 'https://api.flightstats.com' ).get()

            .then(function(data) {
               return data;
            });


    };

    $scope.sendSMS = function() {

        Restangular.oneUrl('/eapi/submission/send_sms/2/2.0?username=qz2rg4&password=Access99&message='+$scope.body+'&msisdn=27833267925', 'http://bulksms.2way.co.za' ).get()

            .then(function(sms) {
                debugger;
                var alertPopup = $ionicPopup.alert({
                    title: 'Thank you',
                    template: 'A message has been sent Status: ->' + sms
                });
            });


    };

    $scope.showhtml = false;
    $scope.showimages = false;

    $ionicModal.fromTemplateUrl('modal.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal) {
        $scope.modal = modal
    })
    $scope.openModal = function(data) {

        for(var i = 0 ;i<$scope.ops.length;i++)
        {
            if($scope.ops[i].title == data) {
                if ($scope.ops[i].properties.embcontent) {
                    $scope.html = $scope.ops[i].properties.embcontent.value;
                    $scope.showhtml = true;
                    $scope.showimages  = false;
                }
                if ($scope.ops[i].properties.embimages) {
                    try {
                        $scope.images = $scope.ops[i].properties.embimages.value.split(',');
                    }
                    catch (e)
                    {$scope.images = $scope.ops[i].properties.embimages.value;}
                    $scope.showimages  = true;
                    $scope.showhtml = false;
                    Restangular.one('umbraco/api/media/GetMediaFromArray?array=' + $scope.images ).get()

                        .then(function(immagearray) {

                            $scope.immagearray = immagearray;
                        });
                }
            }
        }

        $scope.modal.show()
    }

    $scope.closeModal = function() {
        $scope.modal.hide();
    };

    $scope.$on('$destroy', function() {
        $scope.modal.remove();
    });

















    $ionicModal.fromTemplateUrl('profile-modal.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal2) {
        $scope.modal2 = modal2
    })
    $scope.openModal2 = function( t) {

        $scope.tmprofile = t.tmprofile.value;
        $scope.modal2.show()
    }

    $scope.closeModal2 = function() {
        $scope.modal2.hide();
    };

    $scope.$on('$destroy', function() {
        $scope.modal2.remove();
    });




    $ionicModal.fromTemplateUrl('flightstats-modal.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modalFlightStats) {
        $scope.modalFlightStats = modalFlightStats
    })
    $scope.openModalFlightStats = function(data) {

        $scope.flightstats = flightStatus(fnumebr,date)

        $scope.modalFlightStats.show()
    }

    $scope.closeFlightStats = function() {
        $scope.modalFlightStats.hide();
    };

    $scope.$on('$destroy', function() {
        $scope.modalFlightStats.remove();
    });




}];
tripDetailsController.$inject = ['$scope', '$rootScope', '$ionicPlatform', '$ionicSideMenuDelegate', '$firebaseObject', 'loggingService', 'Application', '$ionicNavBarDelegate', '$ionicPopup', '$http', '$stateParams', 'Server', 'UserData', 'Restangular', '$cordovaEmailComposer', '$ionicModal'];

appModule('app.mainPage').controller('tripDetailsController', tripDetailsController);
}());


;(function() {
"use strict";

var tripListCtrl = /*@ngInject*/['$scope', '$ionicSideMenuDelegate', 'loggingService', 'Application', '$ionicNavBarDelegate', '$state', 'Restangular', 'UserData', 'Server', '$localstorage', function ($scope, $ionicSideMenuDelegate,loggingService,Application,$ionicNavBarDelegate,$state,Restangular,UserData,Server,$localstorage) {

    var userdata = $localstorage.getObject('user');
    $scope.showclient = true;

    $scope.goTo = function (hash) {
        console.log('goTo clicked - ' + hash);
        $state.go(hash);
    };
    $scope.$on('$ionicView.enter', function () {

        $ionicNavBarDelegate.showBar(true);

    });
    $scope.openRightSideMenu = function () {
        loggingService.log("triplist", "right button clicked");

        $ionicSideMenuDelegate.toggleRight();
    };

    var user = UserData.getData()[0];

    Application.showLoading(true);
    if (userdata.type = 'team'){
        $scope.showclient = false;
        Restangular.all('/trips-master/?descendants=TripDetails&resolvecontent=country&resolvemedia=buttonflag').getList()
            .then(function (data) {
                debugger;
                $scope.triplist = [];
                $scope.countries = [];
                $scope.opsText = [];
                $scope.opsImage = [];
                for(var i=0;i<data.length;i++)
                {

                    switch(data[i].class[0]) {
                        case 'TripDetails':
                            $scope.triplist.push(data[i]);
                            break;

                        case 'Country':
                            $scope.countries.push(data[i]);

                            break;
                        default:
                            break;
                    }




                }

                Application.hideLoading();
            });
}
    else
    {


    Restangular.all(user.properties.Url +'trip-management?children=true&resolvecontent=tripcountry&resolvemedia=buttonflag').getList()
        .then(function(data) {

            $scope.triplist = [];
            $scope.countries = [];
            $scope.opsText = [];
            $scope.opsImage = [];
            for(var i=0;i<data.length;i++)
            {

                switch(data[i].class[0]) {
                    case 'EmbeddedCkeditor':
                        $scope.opsText.push(data[i]);
                        break;
                    case 'EmbeddedImages':
                        $scope.opsImage.push(data[i]);
                        break;
                    case 'Trip':
                        $scope.triplist.push(data[i]);
                        break;
                    case 'Country':
                        $scope.countries.push(data[i]);

                        break;
                    default:
                        break;
                }




            }

            Application.hideLoading();


        });

    }



    $scope.url = Server.url;

}];
tripListCtrl.$inject = ['$scope', '$ionicSideMenuDelegate', 'loggingService', 'Application', '$ionicNavBarDelegate', '$state', 'Restangular', 'UserData', 'Server', '$localstorage'];

appModule('app.mainPage').controller('tripListCtrl', tripListCtrl);
}());




;(function() {
  "use strict";

  var MapCtrl = /*@ngInject*/['$scope', '$timeout', '$cordovaGeolocation', 'uiGmapGoogleMapApi', '$rootScope', '$q', 'uiGmapIsReady', '$ionicPopup', function ($scope, $timeout, $cordovaGeolocation, uiGmapGoogleMapApi, $rootScope,$q,uiGmapIsReady,$ionicPopup) {

    $scope.mapControl = {};

    uiGmapIsReady.promise()
        .then(function(maps) {
          var mapControl = $scope.mapControl.getGMap();
         var placesService = new google.maps.places.PlacesService(mapControl);

        });

    uiGmapGoogleMapApi.then(function (maps) {
      $scope.map = { center: { latitude: $rootScope.country.lat, longitude: $rootScope.country.lon }, zoom: 15 };
             // Don't pass timeout parameter here; that is handled by setTimeout below
          var posOptions = {enableHighAccuracy: false};
          $cordovaGeolocation.getCurrentPosition(posOptions).then(function(position) {
              console.log("Got location: " + JSON.stringify(position));
              initializeMap(position);
          }, function(error) {
              console.log(error);
              initializeMap();
          });
      });
   $scope.search = function (ss)
   {
       var iam = new google.maps.LatLng($rootScope.country.lat, $rootScope.country.lon);
       var mapControl = $scope.mapControl.getGMap();
       var placesService = new google.maps.places.PlacesService(mapControl);
     var request = {
       location: iam,
       radius: '5000',
       query: [ss]
     };

     var d = $q.defer();
    placesService.textSearch(request, function(results, status) {
       if (status == 'OK') {

         d.resolve(results);
           addMarker(results);
       }
       else d.reject(status);
     });





   }


    $scope.markers = [];
    $scope.infoVisible = false;
    $scope.infoBusiness = {};

    // Initialize and show infoWindow for business
    $scope.showInfo = function(marker, eventName, markerModel) {

        var mapControl = $scope.mapControl.getGMap();
        var placesService = new google.maps.places.PlacesService(mapControl);
        placesService.getDetails({
            placeId: markerModel.place_id
        }, function(place, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                debugger;
              $scope.Details = place;

            }
        });
      $scope.infoBusiness = markerModel;
      $scope.infoVisible = true;
    };

    // Hide infoWindow when 'x' is clicked
    $scope.hideInfo = function() {
      $scope.infoVisible = false;
    };

    var initializeMap = function(position) {
      console.log(position);
      if (!position) {
        // Default to downtown Toronto
        position = {
          coords: {
            latitude: $rootScope.country.lat,
            longitude: $rootScope.country.lon
          }
        };
      }
      console.log(position);
      // TODO add marker on current location

      $scope.map = {
        center: {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude
        },
        zoom: 12
      };

      // Make info window for marker show up above marker
      $scope.windowOptions = {
        pixelOffset: {
          height: -32,
          width: 0
        }
      };



    };

       function setMapOnAll (map) {

      }

// Removes the markers from the map, but keeps them in the array.
      var clearMarkers = function() {
          this.setMapOnAll(null);
      }

// Shows any markers currently in the array.
      var showMarkers = function() {
          var mapControl = $scope.mapControl.getGMap();
          for (var i = 0; i < $scope.markers.length; i++) {


              $scope.markers[i].setMap(mapControl);
          }
      }

// Deletes all markers in the array by removing references to them.
     var  deleteMarkers = function() {
          this.clearMarkers();
         $scope.markers = [];
      }
     var  addMarker = function(res) {

         $scope.randomMarkers = [];
         // Get the bounds from the map once it's loaded
         $scope.$watch(function() {
             return $scope.map.bounds;
         }, function() {

                 var markers = [];
                 for(var i =0 ;i<res.length;i++) {

                     markers.push(createMarker(i,res[i]));
                 }

                 $scope.markers = markers;

         }, true);




      }

      var createMarker = function(i,res) {




          var ret = {
              title:  res.name,
              latitude: res.geometry.location.lat(),
              longitude: res.geometry.location.lng(),
              animation: google.maps.Animation.DROP,
              formatted_address:res.formatted_address,
              place_id:res.place_id,
              id:i

          };
          //ret[idKey] = res.id;;
          return ret;
      };
    // Deal with case where user does not make a selection
    $timeout(function() {
      if (!$scope.map) {
        console.log("No confirmation from user, using fallback");
        initializeMap();
      }
    }, 5000);






  }];
  MapCtrl.$inject = ['$scope', '$timeout', '$cordovaGeolocation', 'uiGmapGoogleMapApi', '$rootScope', '$q', 'uiGmapIsReady', '$ionicPopup'];

  appModule('app.mainPage').controller('MapCtrl', MapCtrl);
}());








 appModule('app.mainPage').controller("mapsController", ['$scope', '$rootScope', '$ionicPlatform', function($scope,$rootScope,$ionicPlatform) {



         var iam = new plugin.google.maps.LatLng($rootScope.country.lat, $rootScope.country.lon);
         var options = {

             center: new plugin.google.maps.LatLng($rootScope.country.lat, $rootScope.country.lon),
             zoom: 13,
             disableDefaultUI: true,
             styles: [{
                 stylers: [{ visibility: 'simplified' }]
             }, {
                 elementType: 'labels',
                 stylers: [{ visibility: 'off' }]
             }]
         }

         var div = document.getElementById("map_canvas");
         var map = plugin.google.maps.Map.getMap(div);
         // this.places = new google.maps.places.PlacesService(map);

     $scope.w =  window.screen.width;
     $scope.h = window.screen.height;

     if ($scope.w > 1000) {$scope.w =370;$scope.h =200;}

     //$scope.search = function(searchPlace) {
     //    $scope.apiError = false;
     //    Map.search(searchPlace)
     //        .then(
     //            function(res) { // success
     //                Map.addMarker(res);
     //                $scope.place.name = res.name;
     //                $scope.place.lat = res.geometry.location.lat();
     //                $scope.place.lng = res.geometry.location.lng();
     //            },
     //            function(status) { // error
     //                $scope.apiError = true;
     //                $scope.apiStatus = status;
     //            }
     //        );
     //}

     $scope.send = function() {
         alert($scope.place.name + ' : ' + $scope.place.lat + ', ' + $scope.place.lng);
     }







}]);







 appModule('app.mainPage').controller("operationController", ['$scope', '$state', '$stateParams', function($scope,$state, $stateParams) {



     $scope.pdfName = 'Operations Manual';
     $scope.pdfUrl = 'Documents/pdf1.pdf';
     $scope.scroll = 1;
     $scope.loading = 'loading';

     $scope.getNavStyle = function(scroll) {
         if(scroll > 100) return 'pdf-controls fixed';
         else return 'pdf-controls';
     }

     $scope.onError = function(error) {
         console.log(error);
     }

     $scope.onLoad = function() {
         $scope.loading = '';
     }

     $scope.onProgress = function(progress) {
         console.log(progress);
     }






 }]);
angular.module('app.mainPage')
   .controller('SurveyAppCtrl', ['$scope', '$state', '$ionicSideMenuDelegate', '$ionicModal', '$ionicHistory', '$timeout', 'FBREF', 'Application', 'UserService', 'Questions', 'Suggestions', function ($scope, $state, $ionicSideMenuDelegate, $ionicModal, $ionicHistory, $timeout, FBREF,Application,UserService,Questions,Suggestions ) {
        $scope.questions = Questions;

        $scope.suggestions = Suggestions;
        // add new items to the array
        // the message is automatically added to our Firebase database!
        $scope.addMessage = function() {
            $scope.suggestions.$add({
                text: $scope.newMessageText
            });
        };
        $scope.recordResponse = recordResponse;

        function recordResponse(question, answer) {

            // Special private property to prevent user from answering again
            question.$answered = true;

            // Increment the reslts
            question.results[answer]++;

            // Save the question.  NOTE : $answered will not be saved
            $scope.questions.$save(question);
        }



        Application.isUserLoggedIn();
        var cu = UserService.currentUser();
        // Public Properties
        $scope.loggedIn = false;
        $scope.loginData = {
            email: cu.userName ,
            password: cu.password
        };

        // Public Methods
        $scope.login = login;
        $scope.logout = logout;

        FBREF.onAuth(authDataCallback);

        // Create the login modal that we will use later
        $ionicModal.fromTemplateUrl('templates/login.html', {
            scope: $scope
        }).then(function (modal) {
            $scope.modal = modal;
        });

        function authDataCallback(authData) {
            if (authData) {
                $scope.loggedIn = true;
                console.log("User " + authData.uid + " is logged in with " + authData.provider);
            } else {
                $scope.loggedIn = false;
                console.log("User is logged out");
            }
        }

        function login() {

            FBREF.authWithPassword($scope.loginData, function (err, authData) {
                if (err) {
                    console.log(err);
                    alert("Bad Email/Password");
                } else {
                    console.log("Auth data = ");
                    console.log(authData);

                    $scope.loginData = {
                        email: '',
                        password: ''
                    };

                    $scope.modal.hide();
                }
            });
        }

        function logout() {
            $ionicHistory.nextViewOptions({
                'disableBack': true,
                'historyRoot': true
            });

            FBREF.unauth();
            $ionicSideMenuDelegate.toggleLeft(false);
            $state.go('app.survey');
        }

    }]);
angular.module('app.mainPage')
    .controller('SurveyController', ['Questions', '$scope', function (Questions,$scope) {
    console.log('SurveyController Entered')
        // Public Properties



    }]);
angular.module('app.mainPage')
    .controller('QuestionsController', ['$scope', '$timeout', '$ionicModal', '$ionicListDelegate', 'FBREF', function ($scope, $timeout, $ionicModal, $ionicListDelegate, FBREF) {


        // Public Properties
        $scope.questions = [];
        $scope.currentQuestion = null;
        $scope.currentQuestionKey = null;

        // Public Methods
        $scope.saveQuestion = saveQuestion;
        $scope.deleteQuestion = deleteQuestion;
        $scope.openQuestionEditor = openQuestionEditor;
        $scope.closeQuestionEditor = closeQuestionEditor;

        function attachQuestions(snapshot) {
            $timeout(function () {
                console.log("have new questions");
                $scope.questions = snapshot.val();
                console.log($scope.questions);
            });
        }

        $scope.$on('$ionicView.beforeEnter', function () {
            FBREF.child('questions').on("value", attachQuestions);
        });

        $scope.$on('$ionicView.beforeLeave', function () {
            FBREF.child('questions').off("value", attachQuestions);
        });

        function saveQuestion() {

            if ($scope.currentQuestionKey) {
                FBREF.child('questions').child($scope.currentQuestionKey).set($scope.currentQuestion);
            } else {
                FBREF.child('questions').push($scope.currentQuestion);
            }

            $scope.closeQuestionEditor();

        }

        function deleteQuestion(questionKey) {
            FBREF.child('questions').child(questionKey).set(null);
        }

        function openQuestionEditor(question, questionKey) {

            if (!question) {

                question = {
                    question: '',
                    results: {
                        'yes': 0,
                        'no': 0
                    }
                };

            }

            $scope.currentQuestion = question;
            $scope.currentQuestionKey = questionKey;

            $ionicModal.fromTemplateUrl('js/app/tripManagement/surveys/questionModal.html', {
                scope: $scope,
                animation: 'slide-in-up'
            }).then(
                function (modal) {
                    $scope.modal = modal;
                    $scope.modal.show();
                }
            );
        }

        function closeQuestionEditor() {
            $scope.modal.hide();
            $scope.modal.remove();

            $ionicListDelegate.closeOptionButtons();
        }


    }]);




angular.module('app.mainPage')
    .controller('SuggestionspCtrl', ['$scope', '$state', '$ionicSideMenuDelegate', '$ionicModal', '$ionicHistory', '$timeout', 'FBREF', 'Application', 'UserService', 'Questions', 'Suggestions', function ($scope, $state, $ionicSideMenuDelegate, $ionicModal, $ionicHistory, $timeout, FBREF,Application,UserService,Questions,Suggestions ) {
        $scope.suggestions = Suggestions;
        $scope.addMessage = function() {
            FBREF.child('questions').push($scope.newMessageText);
        };

    }]);

angular.module('app.mainPage')
    .factory('Questions', ['$firebaseArray', 'FBREF', function ($firebaseArray, FBREF) {

        return $firebaseArray(FBREF.child('questions'));

    }]);
angular.module('app.mainPage')
    .factory('Suggestions', ['$firebaseArray', 'FBREF', function ($firebaseArray, FBREF) {

        return $firebaseArray(FBREF.child('Suggestions'));

    }]);
/**
 * @license Ionic-Weather-Application
 * (c) 2015 Sascha Sambale, http://www.project-webdev.com
 * License: MIT
 */
(function () {
  'use strict';
  /**
   * @ngdoc module
   * @name weatherapp.locations
   * @requires weatherapp.weatherlist
   * @description
   *
   * The weatherapp.locations module provides all necessary components for the 'Locations' screen of the application.
   *
   * You can add a new location by just typing the name or by using GPS. You can also remove locations that you don't need anymore.
   *
   **/
  angular.module('app.mainPage')
  /**
   * @ngdoc controller
   * @name LocationsCtrl
   * @requires $scope
   * @requires $q
   * @requires $ionicPopup
   * @requires LocationService
   * @requires WeatherListFactory
   * @requires WEATHER_API_URL
   * @description
   *
   * The `LocationsController` handles the addition and removal of locations. It uses the {@link LocationService `LocationService`} to actually access the device storage (to store the locations) and to retrieve data from the OpenWeatherMap-API.
   *
   */
    .controller('LocationsController', ['$scope', '$q', '$ionicPopup', 'LocationService', 'WeatherListFactory', 'WEATHER_API_URL','$rootScope','$state', LocationsController]);

  function LocationsController($scope, $q, $ionicPopup, LocationService, WeatherListFactory, WEATHER_API_URL,$rootScope,$state) {

    $scope.$on('$ionicView.enter', function () {

    load();
    });


    function load()

    {

      $scope.Id =0;
      // whenever the Locations view is shown - empty location model and reload the current list of locations.





      //from weatherlistcontroller
      $scope.tb = '';
      $scope.Id = $rootScope.tripId;
      $scope.locationData = [];
      $scope.errorLocationRetrieval = false;
      LocationService.test();
      var locations = LocationService.getLocations();
      $scope.locations = locations;

      $scope.noLocation = locations.length < 1;
      // only display locations when there are some
      if (!$scope.noLocation) {
        // iterate through the stored locations and call the OpenWeatherMap REST API
        locations.forEach(function (location) {
          WeatherListFactory.getWeatherData(location).then(function (response) {
            WeatherListFactory.updateWeatherIcon(response.data).then(function (locationWeather) {
              // store the result in our array, which will be displayed in the view
              $scope.locationData.push(locationWeather);
            });
          }, function () {
            // show error message on screen
            $scope.errorLocationRetrieval = true;
          });
        });
      }

    }



    // removes the given location
    $scope.removeLocation = function (location) {
      $scope.tb = '';
      $scope.locations = LocationService.removeLocation(location);
    load();
    };

    // adds a given location to the storage
    $scope.addLocation = function (location) {
      // validates the location before adding it
      validateLocation(location).then(function () {
        $scope.tb = '';
        $scope.locations = LocationService.addLocation(location.trim());
        load();
      }, function () {
        showError('Error adding location!', 'The location you have entered is either not valid or you don\'t have access to the internet (e.g. firewall access) in order to verify the given location.');
      });
    };

    // retrieves the current location from the device (by using its GPS service)
    $scope.getCurrentLocation = function () {


      $scope.showSpinner = true;
      LocationService.getCurrentLocation().then(function (location) {

        $scope.showSpinner = false;
        $scope.tb = location;

      }, function () {
        $scope.showSpinner = false;
        showError('Error retrieving current location!', 'Your location could not be retrieved. Please make sure you have your GPS Location Services enabled and your network allows the retrieval.');
      });

    };

    /**
     * Shows an error dialog with a given title and text.
     * @param {string} title The title of the dialog
     * @param {string} text The text to be shown in the dialog
     */
    function showError(title, text) {
      $ionicPopup.alert({
        title: title,
        template: text
      });
    }

    /**
     * Validates any given location by first matching it against a simple regular expression and then by trying to retrieve it from the OpenWeatherMap API.
     * @param {string} location The location to validate
     */
    function validateLocation(location) {
      // use a promise to check whether the city is valid or not
      return $q(function (resolve, reject) {
        //very simple pre-validation, so we don't stress the web service unnecessarily
        var myRegExp = /[a-zA-Z]+(?:(?:\\s+|-)[a-zA-Z]+)*/;
        // check if the city matches our regular expression
        if (location && location.match(myRegExp)) {
          // location matched our Regex... let's test it against the web service directly
          WeatherListFactory.getWeatherData(WEATHER_API_URL + 'q=' + location).then(function (response) {
            //noinspection JSUnresolvedVariable
            if (!response.data || response.data.cod === '404') {
              // web service returned error code, so city is not valid
              reject();
            } else {
              // the city is valid, everything is cool.
              resolve();
            }
          }, function () {
            reject();
          });
        } else {
          // looks like the city is not a valid city
          reject();
        }
      });
    }
  }
})();
/**
 * @license Ionic-Weather-Application
 * (c) 2015 Sascha Sambale, http://www.project-webdev.com
 * License: MIT
 */
(function () {
  'use strict';

  // adding 'remove' function to arrays
  Array.prototype.remove = function () {
    var what, a = arguments, L = a.length, ax;
    while (L && this.length) {
      what = a[--L];
      while ((ax = this.indexOf(what)) !== -1) {
        this.splice(ax, 1);
      }
    }
    return this;
  };

  // adding 'remove' function to arrays
  Array.prototype.contains = function (obj) {
    var i = this.length;
    while (i--) {
      if (this[i] === obj) {
        return true;
      }
    }
    return false;
  };

  /**
   * @ngdoc module
   * @name weatherapp.locations
   * @description
   *
   * The weatherapp.locations module provides all necessary components for the 'Locations' screen of the application.
   *
   * You can add a new location by just typing the name or by using GPS. You can also remove locations that you don't need anymore.
   *
   **/
  angular.module('app.mainPage')
  /**
   * @ngdoc factory
   * @name LocationService
   * @requires LocationStorageService
   * @requires $q
   * @requires $cordovaGeolocation
   * @requires WeatherListFactory
   * @requires WEATHER_API_URL
   * @description
   *
   * The `LocationService` handles the low level stuff like storing and retrieving data from the LocalStorage and retrieving data from the OpenWeatherMap API.
   *
   */
    .factory('LocationService', ['LocationStorageService', '$q', '$cordovaGeolocation', 'WeatherListFactory', LocationService]);

  function LocationService(LocationStorageService, $q, $cordovaGeolocation, WeatherListFactory) {
    // The key to store our locations in - we'll use a simple key:[array] solution.
    var LOCATION_STORAGE_KEY = 'l0c4t10nK3y';

    /**
     * Stores a given location to the LocalStorage.
     * @param {string[]} location The location to store
     */
    function storeLocation(location) {
      LocationStorageService.set(LOCATION_STORAGE_KEY, location);
    }

    /**
     * Retrieves all locations from the LocalStorage.
     * @returns {string[]} list of all stored locations
     */
    function getLocations() {

      return LocationStorageService.get(LOCATION_STORAGE_KEY);
    }

    return {

      test:function()
      {
        return true;
      },
      getLocations: function () {

        return getLocations();
      },

      /**
       * Retrieves the current location from the device (by using its GPS service).
       * @returns {Promise} A promise that returns a location if resolved and nothing if rejected.
       */
      getCurrentLocation: function () {
        // set the options for our GPS request, see: http://ngcordova.com/docs/plugins/geolocation
        var options = {timeout: 10000, enableHighAccuracy: false};
        return $q(function (resolve, reject) {

          $cordovaGeolocation
            .getCurrentPosition(options)
            .then(function (position) {
              // if the GPS data has been retrieved (latitude and longitude), call the OpenWeatherMap API to resolve the location name
              WeatherListFactory.getWeatherDataByLatLong(position.coords.latitude, position.coords.longitude).then(function (response) {


                //noinspection JSUnresolvedVariable
                resolve(response.data.name + ', ' + response.data.sys.country+ ', ' +position.coords.longitude+ ', ' +position.coords.latitude);
              }, function () {
                reject();
              });
            }, function () {
              reject();
            });
        });
      },

      /**
       * Adds a given location to the list of locations.
       * @param {string} location The location to store
       */
      addLocation: function (location) {
        var addLocations = getLocations();
        if (!addLocations.contains(location)) {
          addLocations.push(location);
          storeLocation(addLocations);
        }
        return getLocations();
      },

      /**
       * Removes a given location from the list of locations.
       * @param {string} location The location to remove
       */
      removeLocation: function (location) {
        var removeLocations = getLocations();
        removeLocations.remove(location);
        storeLocation(removeLocations);
        return getLocations();
      }
    };
  }
})();
/**
 * @license Ionic-Weather-Application
 * (c) 2015 Sascha Sambale, http://www.project-webdev.com
 * License: MIT
 */
(function () {
  'use strict';
  /**
   * @ngdoc module
   * @name weatherapp.locations
   * @description
   *
   * The weatherapp.locations module provides all necessary components for the 'Locations' screen of the application.
   *
   * You can add a new location by just typing the name or by using GPS. You can also remove locations that you don't need anymore.
   *
   **/
  angular.module('app.mainPage')
  /**
   * @ngdoc factory
   * @name LocationStorageService
   * @requires $window
   * @description
   *
   * The `LocationStorageService` handles the storing and retrieving data from the LocalStorage.
   *
   */
    .factory('LocationStorageService', ['$window', LocationStorageService]);

  function LocationStorageService($window) {
    return {
      set: function (key, value) {

        $window.localStorage[key] = JSON.stringify(value);
      },
      get: function (key) {

        return JSON.parse($window.localStorage[key] || '[]');
      }
    };
  }
})();
/**
 * @license Ionic-Weather-Application
 * (c) 2015 Sascha Sambale, http://www.project-webdev.com
 * License: MIT
 */
(function () {
  'use strict';
  /**
   * @ngdoc module
   * @name weatherapp.weatherlist
   * @description
   *
   * The weatherapp.weatherlist module handles the display of the weather data cards.
   *
   **/
  angular.module('app.mainPage')
  /**
   * @ngdoc constant
   * @name WEATHER_API_URL
   * @description
   *
   * The URL to the OpenWeatherMap API.
   *
   */
    .constant('WEATHER_API_URL', 'http://api.openweathermap.org/data/2.5/weather/?APPID=9e1f4c3abafa11b7fd98d040ec3ed0e7&units=metric&')
  /**
   * @ngdoc constant
   * @name WEATHER_API_IMAGE_URL
   * @description
   *
   * The URL to the images used by OpenWeatherMap API.
   *
   */
    .constant('WEATHER_API_IMAGE_URL', 'http://openweathermap.org/img/w/');
})();

/**
 * @license Ionic-Weather-Application
 * (c) 2015 Sascha Sambale, http://www.project-webdev.com
 * License: MIT
 */
(function () {
  'use strict';
  /**
   * @ngdoc module
   * @name weatherapp.weatherlist
   * @description
   *
   * The weatherapp.weatherlist module handles the display of the weather data cards.
   *
   **/
  angular.module('app.mainPage' )
  /**
   * @ngdoc controller
   * @name WeatherlistController
   * @requires $scope
   * @requires LocationService
   * @requires WeatherListFactory
   *
   * @description
   *
   * The `WeatherlistController` constructs an array of location/weather data, by sending the location to the OpenWeatherMap API and storing the result in a variable.
   *
   */
    .controller('WeatherlistController', ['$scope', 'LocationService', 'WeatherListFactory', WeatherlistController]);

  function WeatherlistController($scope,$rootScope, LocationService, WeatherListFactory) {
    $scope.$on('$ionicView.enter', function () {


    });
  }
})();
/**
 * @license Ionic-Weather-Application
 * (c) 2015 Sascha Sambale, http://www.project-webdev.com
 * License: MIT
 */
(function () {
  'use strict';
  /**
   * @ngdoc module
   * @name weatherapp.weatherlist
   * @description
   *
   * The weatherapp.weatherlist module handles the display of the weather data cards.
   *
   **/
  angular.module('app.mainPage')
  /**
   * @ngdoc factory
   * @name WeatherListFactory
   * @requires $http
   * @requires $q
   * @requires WEATHER_API_URL
   * @requires WEATHER_API_IMAGE_URL
   * @param {string} location The location to call get the weather data from
   * @description
   *
   * The `WeatherListFactory` calls the OpenWeatherMap REST API to fetch the location data and knows how to generate the image url for the weather icons.
   *
   */
    .factory('WeatherListFactory', ['$http', '$q', 'WEATHER_API_URL', 'WEATHER_API_IMAGE_URL', WeatherListFactory]);

  function WeatherListFactory($http, $q, WEATHER_API_URL, WEATHER_API_IMAGE_URL) {
     return {
      getWeatherData: function (location) {
        return $http.get(WEATHER_API_URL + 'q=' + location);
      },

      getWeatherDataByLatLong: function (lat, long) {

                  return $http.get(WEATHER_API_URL + 'lat=' + lat + '&lon=' + long);
      },

      updateWeatherIcon: function (data) {
        return $q(function (resolve) {
          //noinspection JSUnresolvedVariable
          data.weather[0].icon = WEATHER_API_IMAGE_URL + data.weather[0].icon + '.png';
          resolve(data);
        });
      }
    };
  }
})();
;(function() {
  "use strict";

  appModule('app.user',['$rootScope'])

    //
    // A simple model object.
    //
    // Inspired by: https://medium.com/opinionated-angularjs/angular-model-objects-with-javascript-classes-2e6a067c73bc
    //
      .factory('UserData', ['$rootScope', function ($rootScope) {
          var service = {};
          service.data = false;
          service.sendData = function(data){
              this.data = data;
              $rootScope.$broadcast('data_shared');
          };
          service.getData = function(){
              return this.data;
          };
          return service;

          function UserData(data)
          {
              this.data = data;

          }


        return service;
      }])

    .factory('User', function () {

      /**
       * Constructor, with class name
       */
      function User(userName, createdAt, emailVerified, id,url,accessLevel,viewLevel,type) {
        // Public properties, assigned to the instance ('this')
        this.userName = userName;
        this.createdAt = createdAt;
        this.emailVerified = emailVerified;
        this.id = id;
          this.url = url;
              this.accessLevel = accessLevel;
              this.viewLevel = viewLevel;
              this.type = type;
      }

      /**
       * Public method, assigned to prototype
       */
      User.prototype.getLoggedInDuration = function () {
        return (new Date()).getTime() - this.createdAt.getTime();
      };

      /**
       * Static method, assigned to class
       * Instance ('this') is not available in static context
       */
      User.build = function (data) {
        if (!data) {
          return null;
        }

        return new User(
          data.userName,
          new Date(),
          data.emailVerified,
          data.id,
            data.url,
            data.accessLevel,
            data.viewLevel,
            data.type
        );
      };

      /**
       * Return the constructor function ('class')
       */
      return User;
    })

  ;
}());

;(function() {
"use strict";

appModule('app.user')

    // Conditional DI, technique taken from:
    // http://phonegap-tips.com/articles/conditional-dependency-injection-with-angularjs.html

      .factory('UserService', ['$injector', 'APP', function ($injector, APP) {

        if (APP.devMode) {
          return $injector.get('UserServiceUmbracoImpl');
        } else {
          //
          // PRODUCTION MODE - use a Parse.com or a Firebase implementation (uncomment the one you want).
          //
          // Right now the Parse.com implementation is the 'default' one because a few things are missing from the Firebase
          // implementation (email verification, reset/change password functionality).
          //

          // Firebase implementation:
          return $injector.get('UserServiceUmbracoImpl');

          // Parse.com implementation:
          //return $injector.get('UserServiceParseImpl');
        }
      }]);

}());

;(function() {
  "use strict";

  appModule('app.util').directive('formErrors', function() {
    return {
      restrict: 'E',
      replace: true,
      template: '<div class="text-center form-errors" ng-show="vm.error.message">' +
                    '<div class="padding badge badge-royal">' +
                      '{{vm.error.message}}' +
                    '</div>' +
                '</div>'
    };
  });
}());
/*jshint sub:true*/
;(function() {
  "use strict";

  //
  // A directive that can be used on an input or textarea element to indicate the form field associated with the input.
  // This is then used to highlight the label (using CSS classes) when the field becomes 'valid' or 'invalid'.
  //
  // The design of this directive was inspired by the fus-messages directive: github.com/fusionalliance/fus-messages
  //

  appModule('app.util').directive('formField', function () {
    return {
      restrict: 'A',
      require: ['^form'],
      scope: true,
      link: function (scope, element, attrs, ctrls, transclude) {

        scope.inputModel = scope.$eval(attrs['formField']);
        var unwatch = scope.$watchCollection(getFieldStatus, changeCssClasses);

        var parent = element.parent();

        element.bind('focus',function () {
          parent.addClass('has-focus');
        }).bind('blur', function () {
          parent.removeClass('has-focus');
        });

        scope.$on('$destroy', function () {
          unwatch();
        });

        // get the field status depending on whether the input is dirty or when the form has been submitted, etc.
        function getFieldStatus () {
          var formController = ctrls[0];
          if (formController.$submitted || scope.inputModel.$dirty) {
            if (scope.inputModel.$invalid) {
              return 'I';
            }
            if (scope.inputModel.$valid) {
              return 'V';
            }
          }

          return undefined;
        }

        function changeCssClasses(state) {
          if (state == 'I') {
            parent.addClass('has-error');
            parent.removeClass('valid-lr');
          } else if (state == 'V') {
            parent.removeClass('has-error');
            parent.addClass('valid-lr');
          } else {
            parent.removeClass('has-error');
            parent.removeClass('valid-lr');
          }
        }

      }
    };
  });

}());
;(function() {
"use strict";

//
// localStorage.js
//
// Wrapper service for local storage.
//
// This could be overridden/reimplemented to use another storage mechanism e.g. SQLite or PouchDB.
//

appModule('app.util')

  .factory('LocalStorage', ['$window', function ($window) {
    return {
      set: function (key, value) {
        $window.localStorage[key] = value;
      },
      get: function (key, defaultValue) {
        return $window.localStorage[key] || defaultValue;
      },
      setObject: function (key, value) {
        $window.localStorage[key] = JSON.stringify(value);
      },
      getObject: function (key) {
        return JSON.parse($window.localStorage[key] || '{}');
      }
    };
  }]);
}());

;(function() {
"use strict";

//
// logging.js
//
// Enhance the built-in angularjs ogger with some extra features (e.g. printing the timestamp, and logging the number
// of AngularJS watchers in debug mode).
//
appModule('app.util')

  .factory('loggingDecorator', ['dateFilter', function (dateFilter) {
    var decorate = function(log) {

      log.log = enhanceLogging(log.log);
      log.info = enhanceLogging(log.info);
      log.warn = enhanceLogging(log.warn);
      log.debug = enhanceLogging(log.debug);
      log.error = enhanceLogging(log.error);

      log.getLogger = function(context) {
        return {
          log   : enhanceLogging(log.log, context),
          info  : enhanceLogging(log.info, context),
          warn  : enhanceLogging(log.warn, context),
          debug : enhanceLogging(log.debug, context, true),
          error : enhanceLogging(log.error, context)
        };
      };
    };

    // From: https://medium.com/@kentcdodds/counting-angularjs-watchers-11c5134dc2ef
    function getWatchers(root) {
      root = angular.element(root || document.documentElement);
      var watcherCount = 0;

      function getElemWatchers(element) {
        var isolateWatchers = getWatchersFromScope(element.data().$isolateScope);
        var scopeWatchers = getWatchersFromScope(element.data().$scope);
        var watchers = scopeWatchers.concat(isolateWatchers);
        angular.forEach(element.children(), function (childElement) {
          watchers = watchers.concat(getElemWatchers(angular.element(childElement)));
        });
        return watchers;
      }

      function getWatchersFromScope(scope) {
        if (scope) {
          return scope.$$watchers || [];
        } else {
          return [];
        }
      }

      return getElemWatchers(root);
    }

    function enhanceLogging(loggingFunc, context, debug) {
      return function () {
        var modifiedArguments = [].slice.call(arguments);

        var prefix = "";

        if (context) {
          prefix = '[' + context + ']';
        } else {
          prefix = dateFilter(new Date(), 'yyyy-MM-dd HH:mm:ss');
        }

        if (debug) {
          prefix += " {WATCHERS: " + getWatchers().length + "} ";
        }

        modifiedArguments[0] = prefix + " - " + modifiedArguments[0];

        loggingFunc.apply(null, modifiedArguments);
      };
    }

    return {
      decorate: decorate
    };
  }])

  // see: http://blog.pdsullivan.com/posts/2015/02/19/ionicframework-googleanalytics-log-errors.html
  .factory('loggingService', ['$log', 'Tracking', function ($log, Tracking) {

    // The idea of the logging service is that serious errors in your app can be sent to a remote server so that you
    // can track problems in your app. Remote application logging, so to speak.
    //
    // Here, I've used "Tracking.trackEvent(...)" which means the Ionic.io Analytic service, but I'm not sure if this
    // is a good solution (seems you can't see the full error trace in the Ionic.io Analytics dashboard).
    //
    // Other (better?) solutions would be to use Google Analytics, or a service such as loggly, or use your own server.
    //

    //
    ///* use Google Analytics to log the error remotely */
    //
    //var logError = function(error, logger) {
    //
    //  if (!logger) {
    //    logger = $log;
    //  }
    //
    //  //if(window.cordova){
    //  //  $cordovaGoogleAnalytics.trackEvent('error handler', message);
    //  //} else {
    //    logger.error(error);
    //  //}
    //
    //  Tracking.trackEvent("error", error);
    //}

    var log = function(name, event, logger) {

      if (!logger) {
        logger = $log;
      }

      logger.log(name + " " + event);

      Tracking.trackEvent(name, event);
    };

    return {
      log: log
    };
  }])

;
}());

;(function() {
"use strict";

appModule('app.tracking')

  .factory('TrackingIonicImpl', ['$log', '$ionicUser', '$ionicAnalytics', function ($log, $ionicUser, $ionicAnalytics) {

    var init = function (options) {
      $log.debug("TrackingIonicImpl#init");

      $ionicAnalytics.register(options);
    };

    var initUser = function (user) {

      $log.debug("TrackingIonicImpl#initUser with user: " + (user ? user.username : "(none)"));

      // Identify the user (if any) to ionic,io through the user's username (if available).
      // This will aid in making sense of the ionic.io Analytics data.

      // Note: the function returns a promise, so it will finalize in the background, we don't wait for its resolution.

      if (user && user.username) {

        $ionicUser.identify({
          user_id: user.username
        });
      }
    };

    //
    // Function to manually track an event through the Ionic.io analytics service. Event tracking can also be automated
    // by adding a directive to the "ion-view" elements in your templates - see Ionic.io documentation.
    //
    var trackEvent = function (name, event) {
      try {
        $ionicAnalytics.track(name, {event: event});
      } catch (e) {
        $log.error("error tracking " + name + ":" + e);
      }
    };

    return {
      init: init,
      initUser: initUser,
      trackEvent: trackEvent
    };
  }]);
}());

;(function() {
"use strict";

appModule('app.tracking')

  .factory('TrackingMockImpl', ['$log', function ($log) {

    var init = function (options) {
      $log.debug("TrackingMockImpl#init " + (options ? "with" : "without") + " options");
    };

    var initUser = function (user) {
      $log.debug("TrackingMockImpl#initUser with user: " + (user ? user.username : "(none)"));
    };

    var trackEvent = function (name, event) {
      $log.debug("TrackingMockImpl#trackEvent for '" + name + "'");
    };

    return {
      init: init,
      initUser: initUser,
      trackEvent: trackEvent
    };
  }]);
}());

;(function () {
    "use strict";

    appModule('app.user')

        .service('UserServiceUmbracoImpl', ['$q', '$log', 'loggingService', 'User', '$resource', 'UserData', 'Restangular', 'Server', '$rootScope', '$localstorage', function ($q, $log, loggingService, User, $resource, UserData,Restangular,Server,$rootScope,$localstorage) {

            var currentLoggedinUser = null;

            var userData = {
                userName: 'ad@min.com',
                emailVerified: true,
                password: 'password'
            };
            userData = null;
            function setCurrentUser(userData) {
                currentLoggedinUser = User.build(userData);

                return currentLoggedinUser;
            }

            var init = function () {

                setCurrentUser(userData);     // set logged in user at app startup
                // comment out the line above and uncomment the next line to require login at startup
                //setCurrentUser(null);     // no valid user at application init, forcing login at start up

                return currentLoggedinUser;
            };

            var currentUser = function () {
                return currentLoggedinUser;
            };

            // 'checked' version of 'currentLoggedinUser()' returning a promise
            var checkUser = function () {
                if (currentLoggedinUser) {
                    if (currentLoggedinUser.emailVerified) {
                        return $q.when(currentLoggedinUser);
                    } else {
                        return $q.reject({error: "userEmailNotVerified"});
                    }
                } else {
                    return $q.reject({error: "noUser"});
                }
            };

            var signup = function (user) {
                var deferred = $q.defer();

                logout();

                $log.debug("Signup start ...");

                if (user.password == userData.password) {
                    $log.debug("Signup done");

                    // note: we don't set/change the current user because the new user isn't logged in yet
                    deferred.resolve(User.build(userData));
                } else {
                    deferred.reject("unknown_error");
                }

                return deferred.promise;
            };

            var login = function (username, password) {


                var team = false;
                var deferred = $q.defer();
                deferred.reject("invalid_credentials");
                var items;
                logout();
                $localstorage.setObject('user', null);
                $log.debug("Login start ...");
               return Restangular.all('?descendants=Member&nocache=true&where=memberEmail.Contains(%27' + username + '%27)').getList()
                    .then(function (data) {

                        items = data;
                        return Restangular.all('/teams/?descendants=TeamMember&nocache=true&where=teamMemberEmail.Contains(%27' + username + '%27)&nocache=true').getList()
                            .then(function (teammamberdata) {

                                try {
                                    for(var i=0;i<teammamberdata.length;i++) {

                                        switch (teammamberdata[i].class[0]) {
                                            case 'TeamMember':
                                                if (teammamberdata[i].properties === null) {
                                                    // deferred.reject("invalid_credentials");
                                                    //return deferred.promise;
                                                }
                                                if (teammamberdata[i].properties.teamMemberPassword.value == password) {
                                                    team = true;

                                                    var user = teammamberdata[i].properties;
                                                    if (user.Id.value != null) {
                                                        $log.debug("Login done");
                                                        var userData = {
                                                            userName: user.Name.value,
                                                            emailVerified: true,
                                                            id: user.Id.value,
                                                            password: password,
                                                            url: user.url,
                                                            accessLevel: user.accessLevel.value,
                                                            viewLevel: user.viewLevel.value,
                                                            type: 'team'
                                                        };

                                                        $localstorage.setObject('user', userData);
                                                        UserData.sendData(teammamberdata);
                                                        deferred.resolve(setCurrentUser(userData));

                                                    } else {
                                                        deferred.reject("invalid_credentials");
                                                        return deferred.promise;
                                                    }
                                                }
                                                break;


                                            default:
                                                break;
                                        }
                                    }

                                } catch (err) {
                                    deferred.reject("invalid_credentials");
                                    return deferred.promise;

                                }
                            });
                        if(!team) {
                            try {

                                if (items[0].properties === null) {
                                    deferred.reject("invalid_credentials");
                                    return deferred.promise;
                                }
                                if (items[0].properties.memberPassword.value != password) {
                                    deferred.reject("invalid_credentials");
                                    return deferred.promise;
                                }

                            } catch (err) {
                                deferred.reject("invalid_credentials");
                                return deferred.promise;

                            }


                            var user = items[0].properties;

                            if (user == null) {
                                deferred.reject("invalid_credentials");
                            }
                            else if (user.Id.value != null) {
                                $log.debug("Login done");
                                var userData = {
                                    userName: user.Name.value,
                                    emailVerified: true,
                                    id: user.Id.value,
                                    password: password,
                                    url: user.url,
                                    accessLevel: user.accessLevel,
                                    viewLevel: user.viewLevel,
                                    type: 'client'
                                };
                                $localstorage.setObject('user', userData);
                                UserData.sendData(data);
                                deferred.resolve(setCurrentUser(userData));
                            } else {
                                deferred.reject("invalid_credentials");
                            }

                        }
                    });

                deferred.reject("invalid_credentials");
                return deferred.promise;



            };

            var logout = function () {
                setCurrentUser(null);
            };

            var resetPassword = function (email) {
                var deferred = $q.defer();

                logout();

                $log.debug("Password reset start ...");
                $log.debug("Password reset done");

                deferred.resolve();

                return deferred.promise;
            };

            return {
                init: init,
                currentUser: currentUser,
                checkUser: checkUser,
                signup: signup,
                login: login,
                logout: logout,
                resetPassword: resetPassword
            };
        }])
    ;
}());
